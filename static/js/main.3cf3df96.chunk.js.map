{"version":3,"sources":["../node_modules/peerjs/dist sync","Actions.ts","Rules.ts","Network.ts","Game.ts","Ui/Splash.tsx","Ui/Lobby.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Action","gameHasEnoughPlayers","players","passed","length","message","gameHasNotStarted","started","gameHasStarted","isPlayersTurn","player","turn","indexOf","HostBroadcastType","ClientMessageType","BaseAction","p","type","rules","failedRules","this","gameState","forEach","r","result","push","t","meta","ActionToBePerformed","JoinGame","StartGame","TakeGems","PurchaseCard","ReserveCard","moveGems","from","to","amount","Object","gemType","g","isContextPlayer","contextPlayer","gems","desired","filter","star","totalGems","values","reduce","a","b","result1","v","gem","bank","canTakeTwoGems","canTakeThreeGems","isTakingTwoOrThreeGems","nextTurn","cards","index","card","costs","c","Gem","canAffordCard","splice","reserved","reservedCards","emptyGemStash","Tier","Network","onError","err","connectionId","peer","debugLevel","createConnectionId","Peer","fullyQualifiedId","debug","on","connections","disconnect","destroy","Host","clients","Math","random","toString","substr","toUpperCase","onConnect","onPlayerUpdate","connected","client","metadata","name","broadcast","LOBBY_PLAYERS","console","log","findIndex","data","m","send","DISBANDED","Client","onHostBroadcast","conn","connect","DISCONNECTED","close","Ruby","Sapphire","Diamond","Onyx","Emerald","Star","shuffle","arr","reduceRight","res","_","__","s","Card","points","tier","CardPile","n","destination","GameState","tierICards","tierIICards","tierIIICards","tierIDrawPile","tierIIDrawPile","tierIIIDrawPile","nobles","background","cardsJson","map","ruby","sapphire","diamond","onyx","emerald","noblesJson","I","II","III","drawVisibleCards","draw","Player","Game","host","onStateUpdateCallback","playerId","callback","actionType","action","create","receiveAction","checkRules","act","alert","instance","undefined","getInstance","SplashScreenStyle","styled","div","SplashBackgroundStyle","attrs","props","imageSrc","bgColor","SplashTitle","h1","GameTitleStyle","h2","GameTitle","HostButton","button","JoinGameArea","JoinGameInput","input","JoinGameButton","SplashBackground","state","src","color","loadBackground","process","floor","fac","FastAverageColor","getColorAsync","setState","hex","children","React","Component","ChangeNameLink","WelcomeStyle","ChosenNameStyle","ChangeNameInput","ErrorMessage","names","randomName","Splash","useState","isChangingName","setIsChangingName","setName","setCode","useEffect","window","location","pathname","replace","errorMessage","placeholder","autoFocus","onChange","target","value","onKeyPress","i","which","onClick","hostLobby","disabled","joinLobby","LobbyPageStyle","ContentColumnStyle","PlayerBoxes","PlayerBoxStyle","LobbyCode","CodeUnderline","ExitLink","StartGameButtonStyle","PlayerNameConnectingStyle","span","defaultLobbyHostState","game","LobbyHost","playerName","newHost","setErrorMessage","setWindowCloseDialog","onunload","disconnectHost","confirm","setIsHostingLobby","history","pushState","document","title","onbeforeunload","cleanupLobby","event","returnValue","disbandLobby","defaultLobbyClientState","LobbyClient","joinLobbyCode","newClient","networkErrorHandler","disconnectClient","join","msg","exitWithErrorMessage","setJoinLobbyCode","error","exitLobby","cleanupLobbyAndExit","Lobby","codeInput","updateBrowserLocation","copyCodeToClipboard","current","select","execCommand","createRef","prevProps","ref","readOnly","Array","startGame","AppStyle","App","isHostingLobby","setPlayerName","setGameState","onStateUpdate","gs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3cf3df96.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 33;","import { GameState, Player, GemStash, Gem, Card, Tier, CardPile, emptyGemStash } from './Game';\nimport { Rule, isPlayersTurn, Result, gameIsNotFull, canAffordCard, bankHasEnoughGems, isTakingTwoOrThreeGems, canTakeThreeGems, gemsAreOfSameType, canTakeTwoGems, canReserveCard, gameHasEnoughPlayers, gameHasNotStarted, gameHasStarted, isValidGems } from './Rules';\n\nexport enum Action {\n  JoinGame = 'JoinGame',\n  StartGame = 'StartGame',\n  TakeGems = 'TakeGems',\n  ReserveCard = 'ReserveCard',\n  PurchaseCard = 'PurchaseCard',\n}\n\nexport interface IAction {\n  type?: Action\n  player: Player\n  rules: Rule[]\n  failedRules: Result[]\n  checkRules: (gameState: Readonly<GameState>) => boolean\n  act(gameState: GameState): void;\n}\n\nexport abstract class BaseAction implements IAction {\n  type?: Action\n  player: Player\n  rules: Rule[]\n  failedRules: Result[]\n\n  constructor(p: Player) {\n    this.player = p;\n    this.rules = [];\n    this.failedRules = [];\n  }\n\n  static create(p: Player, t: Action, meta: any) {\n    const actionFactoryMap = {\n      [Action.JoinGame]: JoinGame,\n      [Action.StartGame]: StartGame,\n      [Action.TakeGems]: TakeGems,\n      [Action.PurchaseCard]: PurchaseCard,\n      [Action.ReserveCard]: ReserveCard\n    }\n\n    const ActionToBePerformed = actionFactoryMap[t];\n\n    return new ActionToBePerformed(p, {...meta})\n  }\n\n  checkRules(gameState: Readonly<GameState>): boolean {\n    this.rules.forEach(r => {\n      const result = r(gameState);\n\n      if (!result.passed) {\n        this.failedRules.push(result);\n      }\n    });\n\n    if (this.failedRules.length > 0) {\n      return false;\n    }\n    return true;\n  }\n\n  nextTurn(gameState: GameState) {\n    let turn = gameState.turn + 1;\n\n    if (turn > gameState.players.length) {\n      turn = 1;\n    }\n\n    gameState.turn = turn;\n  }\n\n  abstract act(gameState: GameState): void;\n}\n\nconst moveGems = (from: GemStash, to: GemStash, amount: GemStash) => {\n  Object.keys(from).forEach(gemType => {\n    from[gemType as Gem] -= amount[gemType as Gem];\n    to[gemType as Gem] += amount[gemType as Gem];\n  })\n}\n\nexport class StartGame extends BaseAction {\n  constructor(p: Player, meta: {}) {\n    super(p);\n    this.type = Action.StartGame;\n\n    this.rules = [\n      (g: Readonly<GameState>) => gameHasEnoughPlayers(g.players),\n      (g: Readonly<GameState>) => gameHasNotStarted(g.started)\n    ]\n  }\n\n\n  act(gameState: GameState) {\n    gameState.started = true;\n    gameState.turn = 1;\n  }\n}\n\nexport class JoinGame extends BaseAction {\n  isContextPlayer: boolean;\n  constructor(p: Player, meta: { isContextPlayer: boolean }) {\n    super(p)\n    this.type = Action.JoinGame;\n    this.isContextPlayer = meta.isContextPlayer;\n    this.rules = [\n      (g: Readonly<GameState>) => gameIsNotFull(g.players),\n      (g: Readonly<GameState>) => gameHasNotStarted(g.started)\n    ]\n  }\n\n  act(gameState: GameState) {\n    gameState.players.push(this.player);\n\n    if (this.isContextPlayer) {\n      gameState.contextPlayer = this.player;\n    }\n  }\n}\n\nexport class TakeGems extends BaseAction {\n  gems: GemStash;\n\n  constructor(p: Player, meta: { gems: GemStash }) {\n    super(p);\n\n    this.type = Action.TakeGems;\n    this.gems = meta.gems;\n    this.rules = [\n      (g: Readonly<GameState>) => gameHasStarted(g.started),\n      (g: Readonly<GameState>) => gameHasEnoughPlayers(g.players),\n      (g: Readonly<GameState>) => isPlayersTurn(this.player, g.players, g.turn),\n      (g: Readonly<GameState>) => bankHasEnoughGems(this.gems, g.gems),\n      (g: Readonly<GameState>) => isValidGems(this.gems),\n      (g: Readonly<GameState>) => {\n        const totalGems = Object.values(this.gems).reduce((a,b) => a+b);\n\n        if (totalGems === 2) {\n          const result1 = gemsAreOfSameType(this.gems);\n\n          if (!result1.passed) {\n            return result1;\n          }\n\n          const gem = Object.keys(this.gems).filter(g => this.gems[g as Gem] === 2)[0]\n\n          return canTakeTwoGems(gem as Gem, g.gems);\n        }\n        if (totalGems === 3) {\n          return canTakeThreeGems(this.gems);\n        }\n\n        return isTakingTwoOrThreeGems(totalGems);\n      }\n    ];\n  }\n\n  act(gameState: GameState) {\n    moveGems(gameState.gems, this.player.gems, this.gems);\n    this.nextTurn(gameState);\n  }\n}\n\nexport class PurchaseCard extends BaseAction {\n  cards: Card[];\n  index: number;\n\n  constructor(p: Player, meta: { cards: Card[], index: number }) {\n    super(p);\n\n    this.type = Action.PurchaseCard;\n    this.index = meta.index;\n    this.cards = meta.cards;\n\n    this.rules = [\n      (g: Readonly<GameState>) => gameHasStarted(g.started),\n      (g: Readonly<GameState>) => gameHasEnoughPlayers(g.players),\n      (g: Readonly<GameState>) => isPlayersTurn(this.player, g.players, g.turn),\n      (g: Readonly<GameState>) => { \n        const card = this.cards[this.index];\n\n        return canAffordCard(card, this.player);\n      }\n    ]\n  }\n\n  act(gameState: GameState) {\n    const card = this.cards.splice(this.index,1)[0];\n\n    moveGems(this.player.gems, gameState.gems, card.costs);\n\n    if (card.reserved) {\n      card.reserved = false;\n    }\n\n    this.player.cards.cards.push(card);\n    this.nextTurn(gameState);\n  }\n}\n\nexport class ReserveCard extends BaseAction {\n  cards: Card[];\n  index: number;\n\n  constructor(p: Player, meta: { cards: Card[], index: number }) {\n    super(p);\n\n    this.type = Action.ReserveCard;\n    this.cards = meta.cards;\n    this.index = meta.index;\n\n    this.rules = [\n      (g: Readonly<GameState>) => gameHasStarted(g.started),\n      (g: Readonly<GameState>) => gameHasEnoughPlayers(g.players),\n      (g: Readonly<GameState>) => isPlayersTurn(this.player, g.players, g.turn),\n      (g: Readonly<GameState>) => canReserveCard(this.player)\n    ];\n  }\n\n  act(gameState: GameState) {\n    const card = this.cards.splice(this.index,1)[0];\n\n    const gems = emptyGemStash();\n    gems.star = 1;\n\n    moveGems(gameState.gems, this.player.gems, gems);\n\n    card.reserved = true;\n\n    this.player.reservedCards.push(card);\n    this.nextTurn(gameState);\n  }\n}","import { GameState, Player, PlayerTurn, GemStash, Gem, Card } from './Game';\n\nexport interface Result {\n  passed: boolean;\n  message: string;\n}\n\nexport type Rule = (gameState: Readonly<GameState>) => Result\n\nexport const playerHasJoinedGame = (player: Player, players: Player[]): Result => {\n  return {\n    passed: players.filter(p => p.id === player.id).length > 0,\n    message: 'Player has not joined game'\n  }\n}\n\nexport const gameHasEnoughPlayers = (players: Player[]): Result => {\n  return {\n    passed: players.length > 1,\n    message: 'There must be at least two players to start'\n  }\n}\n\nexport const gameHasNotStarted = (started: boolean): Result => {\n  return {\n    passed: !started,\n    message: 'Game has already started.'\n  }\n}\n\nexport const gameHasStarted = (started: boolean): Result => {\n  return {\n    passed: started,\n    message: 'Game must be started first.'\n  }\n}\n\nexport const isPlayersTurn = (player: Player, players: Player[], turn: PlayerTurn): Result => {\n  return {\n    passed: (players.indexOf(player)+1) === turn,\n    message: 'Players can only act when it is their turn.'\n  }\n}\n\nexport const gameIsNotFull = (players: Player[]): Result => {\n  const PLAYER_LIMIT = 4;\n\n  return {\n    passed: players.length < PLAYER_LIMIT,\n    message: 'This game is full.'\n  }\n}\n\nexport const canAffordCard = (card: Card, player: Player): Result => {\n  const overdrawn = Object.keys(card.costs).filter(gemType => card.costs[gemType as Gem] > player.gems[gemType as Gem]+player.cards.cards.filter(c => c.gem === Gem[gemType as keyof typeof Gem]).length).length;\n\n  return {\n    passed: overdrawn === 0,\n    message: 'Not enough gems to purchase this card.'\n  }\n}\n\n\nexport const gemsAreOfSameType = (desired: GemStash): Result => {\n  return {\n    passed: Object.values(desired).filter(v => v > 0).length === 1,\n    message: 'Gems must be of the same type when taking two gems.'\n  }\n}\n\nexport const canTakeTwoGems = (gem: Gem, bank: GemStash): Result => {\n  return {\n    passed: bank[gem] >= 4,\n    message: 'There must be at least four gems of the desired type in the bank to take two gems.'\n  }\n}\n\nexport const canTakeThreeGems = (desired: GemStash): Result => {\n  return {\n    passed: Object.keys(desired).filter(g => desired[g as Gem] > 1).length === 0,\n    message: 'Gems must be of different types to take three gems.'\n  }\n}\n\nexport const isValidGems = (desired: GemStash): Result => {\n  return {\n    passed: desired.star === 0,\n    message: 'Only valid gems can be selected.'\n  }\n}\n\nexport const canReserveCard = (player: Player): Result => {\n  return {\n    passed: player.reservedCards.length < 3,\n    message: 'A maximum of three cards may be reserved.'\n  }\n}\n\nexport const isTakingTwoOrThreeGems = (totalGems:number): Result => {\n  return {\n    passed: totalGems >= 2 && totalGems <= 3,\n    message: 'Only two or three gems can be taken per turn.'\n  }\n}\n\nexport const bankHasEnoughGems = (desired: GemStash, from: GemStash): Result => {\n  const overdrawn = Object.keys(desired).filter(gemType => desired[gemType as Gem] > from[gemType as Gem]).length;\n\n  return {\n    passed: overdrawn === 0,\n    message: 'Not enough gems in the bank to complete this action.'\n  }\n}\n","import Peer from 'peerjs';\nimport { Player } from './Game';\n\nexport enum HostBroadcastType {\n  DISBANDED = 'DISBANDED',\n  DISCONNECTED = 'DISCONNECTED',\n  LOBBY_PLAYERS = 'LOBBY_PLAYERS'\n}\n\ninterface HostNetworkMessage {\n  type: HostBroadcastType,\n  meta?: any;\n}\n\nenum ClientMessageType {\n  DISCONNECTING = 'DISCONNECTING'\n}\n\ninterface ClientNetworkMessage {\n  type: ClientMessageType\n  meta?: any\n}\n\nexport abstract class Network {\n  onError = (err: any) =>  {};\n  player: Player;\n  connectionId: string;\n  peer: Peer;\n  debugLevel: number;\n\n  constructor(player: Player, onError: (err: any) => void) {\n    this.player = player;\n    this.debugLevel = 3;\n    this.connectionId = this.createConnectionId();\n    this.peer = new Peer(this.fullyQualifiedId(this.connectionId), { debug: this.debugLevel });\n\n    this.peer.on('error', onError);\n  }\n\n  destroy() {\n    this.peer.connections.forEach((c:any) => c.disconnect());\n    this.peer.disconnect();\n    this.peer.destroy();\n  }\n\n  fullyQualifiedId(code: string) {\n    return  `schmeckles_${code}`;\n  }\n\n  abstract createConnectionId(): string;\n}\n\nexport class Host extends Network {\n  clients: Peer.DataConnection[] = [];\n  players: Player[] = [];\n\n  createConnectionId() {\n    return Math.random().toString(20).substr(2, 4).toUpperCase();\n  }\n\n  destroy() {\n    this.peer.connections.forEach((c:any) => c.disconnect());\n    this.peer.disconnect();\n    this.peer.destroy();\n  }\n\n  host(onConnect: (code: string) => void, onPlayerUpdate: (p: Player[]) => void) {\n    this.player.connected = true;\n    this.players = [this.player];\n\n    this.peer.on('open', (id) => {\n      onConnect(this.connectionId);\n\n      this.peer.on('connection', (client) => {\n  \n        const player = client.metadata;\n        if (this.players.length < 4 && player.name.length > 0) {\n          this.players.push(player);\n          this.clients.push(client);\n\n          onPlayerUpdate(this.players);\n          this.broadcast({ type: HostBroadcastType.LOBBY_PLAYERS, meta: this.players });\n        }\n\n        client.on('open', () => {\n          client.metadata.connected = true;\n          // Send players when the connection is ready\n          this.broadcast({ type: HostBroadcastType.LOBBY_PLAYERS, meta: this.players });\n          onPlayerUpdate(this.players);\n        });\n\n        client.on('close', () => {\n          console.log('closed connection with ' + client.metadata.name);\n          this.players.splice(this.players.findIndex(p => p.connectionId === client.peer), 1)\n          this.broadcast({ type: HostBroadcastType.LOBBY_PLAYERS, meta: this.players });\n          onPlayerUpdate(this.players);\n        })\n    \n        // Receive data from clients:\n        client.on('data', function(data) {\n          console.log('Received', data);\n        });\n      })\n    });\n  }\n\n  broadcast(m: HostNetworkMessage) {\n    console.log('Broadcasting: ', m);\n\n    this.clients.forEach(c => {\n      c.send(m);\n    })\n  }\n\n  disconnect() {\n    this.broadcast({ type: HostBroadcastType.DISBANDED });\n    this.peer.disconnect();\n  }\n}\n\nexport class Client extends Network {\n  code: string = ''\n\n  createConnectionId() {\n    return Math.random().toString(20).substr(2, 10);\n  }\n\n  join(code: string, onHostBroadcast: (message: HostNetworkMessage) => void) {\n    this.peer.on('open', (id:string) => {\n      this.player.connectionId = this.fullyQualifiedId(this.connectionId);\n\n      const conn = this.peer.connect(this.fullyQualifiedId(code), { metadata: this.player });\n      this.code = code;\n\n      conn.on('open', () => {\n        // Receive data from host\n        conn.on('data', (data) => {\n          console.log('Received broadcast: ', data);\n          onHostBroadcast(data);\n        })\n\n        conn.on('close', () => {\n          onHostBroadcast({ type: HostBroadcastType.DISCONNECTED });\n        })\n      })\n    })\n  }\n\n  disconnect() {\n    this.peer.connections[this.fullyQualifiedId(this.code)][0].close();\n  }\n}\n","import cardsJson from './cards.json';\nimport noblesJson from './nobles.json';\nimport { BaseAction, IAction, Action } from './Actions';\nimport { Client, Host } from './Network';\n\ninterface NobleJsonValues {\n  points: number;\n  diamond: number | null;\n  sapphire: number | null;\n  emerald: number | null;\n  ruby: number | null;\n  onyx: number | null;\n}\n\ninterface CardJsonValues {\n  gem: string;\n  tier: number;\n  points: number | null;\n  diamond: number | null;\n  sapphire: number | null;\n  emerald: number | null;\n  ruby: number | null;\n  onyx: number | null;\n}\n\nexport enum Gem {\n  Ruby = 'ruby', \n  Sapphire = 'sapphire', \n  Onyx = 'onyx', \n  Emerald = 'emerald', \n  Diamond = 'diamond',\n  Star = 'star'\n}\n\nexport enum Tier {\n  I = 1, \n  II = 2, \n  III = 3\n}\nexport interface Noble {\n  points: number;\n  costs: GemStash;\n}\n\nexport interface GemStash {\n  [Gem.Ruby]: number;\n  [Gem.Sapphire]: number;\n  [Gem.Diamond]: number;\n  [Gem.Onyx]: number;\n  [Gem.Emerald]: number;\n  [Gem.Star]: number;\n}\n\nexport const emptyGemStash = () => {\n  return {\n    [Gem.Ruby]: 0,\n    [Gem.Sapphire]: 0,\n    [Gem.Diamond]: 0,\n    [Gem.Onyx]: 0,\n    [Gem.Emerald]: 0,\n    [Gem.Star]: 0\n  }\n}\n\nconst mapNobleValuesJsonToNobleType = (noblesValues: NobleJsonValues[]) => noblesValues.map(\n  n => {\n    return {\n      points: n.points,\n      costs: {\n        [Gem.Ruby]: n.ruby || 0,\n        [Gem.Sapphire]: n.sapphire || 0,\n        [Gem.Diamond]: n.diamond || 0,\n        [Gem.Onyx]: n.onyx || 0,\n        [Gem.Emerald]: n.emerald || 0\n      }\n    }\n  }\n);\n\nconst mapCardValuesJsonToCardType = (cardValues: CardJsonValues[]) => cardValues.map(\n  c => new Card(\n    c.points || 0,\n    c.gem as Gem,\n    c.tier as Tier,\n    {\n      [Gem.Ruby]: c.ruby || 0,\n      [Gem.Sapphire]: c.sapphire || 0,\n      [Gem.Diamond]: c.diamond || 0,\n      [Gem.Onyx]: c.onyx || 0,\n      [Gem.Emerald]: c.emerald || 0,\n      [Gem.Star]: 0\n    }\n  )\n)\n\nconst shuffle = (arr:Array<any>) => \n  [...arr].reduceRight((res,_,__,s) => \n    (res.push(s.splice(0|Math.random()*s.length,1)[0]), res), []);\n\nexport class Card {\n  points: number;\n  gem: Gem;\n  tier: Tier;\n  costs: GemStash;\n  reserved?: boolean\n\n  constructor(points: number, gem: Gem, tier: Tier, costs: GemStash) {\n    this.points = points;\n    this.gem = gem;\n    this.tier = tier;\n    this.costs = costs;\n  }\n}\n\nexport class CardPile {\n  cards: Card[];\n  tier?: Tier;\n  \n  constructor(tier?: Tier, cards?: Card[]) {\n    if (tier) this.tier = tier;\n\n    if (cards) {\n      this.cards = shuffle(cards);\n    } else {\n      this.cards = [];\n    }\n  }\n\n  draw(n: number, destination: CardPile) {\n    this.cards.splice(0, n).forEach(c => destination.cards.push(c));\n  }\n}\n\nexport type PlayerTurn = number;\n\nexport class GameState  {\n  tierICards: CardPile;\n  tierIICards: CardPile;\n  tierIIICards: CardPile;\n  tierIDrawPile: CardPile;\n  tierIIDrawPile: CardPile;\n  tierIIIDrawPile: CardPile;\n  nobles: Noble[];\n  gems: GemStash;\n  players: Player[];\n  started: boolean;\n  contextPlayer: Player | undefined;\n  turn: PlayerTurn;\n  background: string;\n\n  constructor() {\n    const cards = mapCardValuesJsonToCardType(cardsJson);\n    const nobles = shuffle(mapNobleValuesJsonToNobleType(noblesJson));\n\n    this.background = '';\n    this.players = [];\n    this.nobles = nobles.splice(0, 3);\n\n    this.tierICards = new CardPile(Tier.I, []);\n    this.tierIICards = new CardPile(Tier.II, []);\n    this.tierIIICards = new CardPile(Tier.III, []);\n\n    this.tierIDrawPile = new CardPile(Tier.I, cards.filter(c => c.tier === Tier.I));\n    this.tierIIDrawPile = new CardPile(Tier.II, cards.filter(c => c.tier === Tier.II));\n    this.tierIIIDrawPile = new CardPile(Tier.III, cards.filter(c => c.tier === Tier.III));\n\n    this.drawVisibleCards();\n    this.turn = 1;\n    this.started = false;\n\n    this.gems = {\n      [Gem.Ruby]: 7,\n      [Gem.Sapphire]: 7,\n      [Gem.Diamond]: 7,\n      [Gem.Onyx]: 7,\n      [Gem.Emerald]: 7,\n      [Gem.Star]: 5\n    }\n  }\n\n  drawVisibleCards() {\n    this.tierIDrawPile.draw(4-this.tierICards.cards.length, this.tierICards);\n    this.tierIIDrawPile.draw(4-this.tierIICards.cards.length, this.tierIICards);\n    this.tierIIIDrawPile.draw(4-this.tierIIICards.cards.length, this.tierIIICards);\n  }\n}\n\nexport class Player {\n  id: string;\n  name: string;\n  gems: GemStash;\n  cards: CardPile;\n  reservedCards: Card[];\n  nobles: Noble[];\n  connected: boolean;\n  connectionId: string;\n\n  constructor(name: string) {    \n    this.id = name;\n    this.name = name;\n    this.gems = emptyGemStash();\n    this.cards = new CardPile();\n    this.reservedCards = [];\n    this.nobles = [];\n    this.connected = false;\n    this.connectionId = '';\n  }\n}\n\n\nexport default class Game {\n  gameState: GameState;\n  host: Host | undefined;\n  client: Client | undefined;\n  private static instance: Game | undefined;\n  private onStateUpdateCallback: ((gameState: GameState) => void) | null;\n\n  private constructor() {\n    this.gameState = new GameState();\n    this.onStateUpdateCallback = null;\n  }\n\n  public static getInstance(): Game {\n    if (!Game.instance) {\n      Game.instance = new Game();\n    }\n\n    return Game.instance;\n  }\n\n  newClient(p:Player, onError: (err:any) => void):Client {\n    if (this.client) {\n      this.client.destroy();\n    }\n    this.client = new Client(p, onError);\n\n    return this.client;\n  }\n\n  newHost(p:Player, onError: (err:any) => void):Host {\n    if (this.host) {\n      this.host.destroy();\n    }\n    this.host = new Host(p, onError);\n\n    return this.host;\n  }\n\n  getPlayer(playerId: string) {\n    return this.gameState.players.filter(p => p.id === playerId)[0];\n  }\n\n  onStateUpdate(callback: (gameState: GameState) => void):void {\n    this.onStateUpdateCallback = callback;\n  }\n\n  sendAction(player: Player, actionType: Action, data: any) {\n    const action = BaseAction.create(\n      player,\n      actionType,\n      data\n    );  \n\n    this.receiveAction(action);\n  }\n\n  public static reset(): Game {\n    Game.instance = undefined;\n\n    return this.getInstance();\n  }\n\n  receiveAction(action: IAction) {\n    if (action.checkRules(this.gameState)) {\n      action.act(this.gameState);\n    } else {\n      action.failedRules.map(a => alert(a.message));\n    }\n    if (this.onStateUpdateCallback) {\n      this.onStateUpdateCallback(this.gameState);\n    }\n  }\n}","import styled from 'styled-components';\nimport React, { useEffect, useState } from 'react';\nimport FastAverageColor from 'fast-average-color';\n\n\nconst SplashScreenStyle = styled.div`\n  width: 100%;\n  background: #999;\n  text-align: center;\n  height: 100%;\n`\n\ninterface SplashScreenProps {\n  imageSrc: string;\n  bgColor?: string;\n}\n\nexport const SplashBackgroundStyle = styled.div.attrs((props: SplashScreenProps) => ({\n  imageSrc: props.imageSrc,\n  bgColor: props.bgColor || '#555555'\n}))`\n  background-image: url(${props => props.imageSrc});\n  background-color: ${props => props.bgColor};\n  background-size: contain;\n  background-position: center center;\n  background-repeat: no-repeat;\n  height: 100%;\n`\n\nconst SplashTitle = styled.h1`\n  font-size: 70px;\n  color: #FFDC73;\n  -webkit-text-stroke: 1px #BF9B30;\n  margin: 0;\n  padding: 20px 0 50px 0;\n`\n\nconst GameTitleStyle = styled.h2`\n  font-size: 36px;\n  color: #FFDC73;\n  -webkit-text-stroke: 0.5px #BF9B30;\n  text-shadow: 1px 1px 1px #000;\n  margin: 0;\n  text-align: center;\n`\n\nexport const GameTitle = () => (\n  <GameTitleStyle>Schmeckles</GameTitleStyle>\n)\n\nconst HostButton = styled.button`\n  border-radius: 0;\n  font-size: 28px;\n  padding: 10px;\n  background: #91a4e6;\n  border: 2px solid #3451b3;\n  width: 400px;\n`\n\nconst JoinGameArea = styled.div`\n  display: flex;\n  margin: 20px auto;\n  width: 400px;\n`\n\nconst JoinGameInput = styled.input`\n  font-size: 28px;\n  padding: 10px;\n  border: 2px solid #ccc;\n  text-align: center;\n  text-transform: uppercase;\n  width: 150px;\n`\n\nconst JoinGameButton = styled.button`\n  border-radius: 0;\n  font-size: 28px;\n  padding: 10px;\n  border: 2px solid #2f8a33;\n  background: #5ee465;\n  margin-left: 20px;\n  width: 230px;\n`\ninterface SplashBackgroundProps {\n  children: React.ReactNode,\n  src?: string\n}\ninterface SplashBackgroundState {\n  background: {\n    src: string;\n    color: string;\n  }\n}\n\nexport const getRandomBackgroundSrc = () => {\n  return `${process.env.PUBLIC_URL}/splash/splash${Math.floor(Math.random() * 16)+1}.jpg`;\n}\n\nexport class SplashBackground extends React.Component<SplashBackgroundProps, SplashBackgroundState> {\n  state: SplashBackgroundState;\n\n  constructor(props: SplashBackgroundProps) {\n    super(props);\n\n    this.state = {\n      background: {\n        src: props.src || '',\n        color: ''\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.loadBackground();\n  }\n\n  async loadBackground() {\n    const src = this.props.src || getRandomBackgroundSrc();\n    const fac = new FastAverageColor();\n\n    const color = await fac.getColorAsync(src);\n\n    this.setState({ background: { src: src, color: color.hex } });\n  }\n\n  render() {\n    return (\n      <SplashBackgroundStyle imageSrc={this.state.background.src} bgColor={this.state.background.color}>\n        {this.props.children}\n      </SplashBackgroundStyle>\n    );\n  }\n}\n\nconst ChangeNameLink = styled.a`\n  color: #00d9ff;\n  text-decoration: underline;\n  cursor: pointer;\n`\n\nconst WelcomeStyle = styled.p`\n  color: #fff;\n  font-size: 24px;\n  text-shadow: 1px 1px 1px #000;\n  font-weight: bold;\n  user-select: none;\n`\n\nconst ChosenNameStyle = styled.a`\n  border-bottom: 1px dashed #fff;\n  cursor: pointer;\n`\n\nconst ChangeNameInput = styled.input`\n  padding: 2px;\n  font-size: 20px;\n  text-align: center;\n  margin-left: 10px;\n  width: 140px;\n`\n\nconst ErrorMessage = styled.div`\n  font-size: 20px;\n  color: #fff;\n  display: inline-block;\n  padding: 8px;\n  border-radius: 8px;\n  background: rgba(255, 0, 0, 0.5);\n`\n\nconst names = ['Helgi','Finnbogi','Abu','Jean','Samo','Giovanni','Luís','Jeanne','Gregorio','Domini','Andres','Guglielmo','Hugo','Muhammad', 'Eldad', 'Wulfstan', 'Joseph', 'Aldo', 'Alessio', 'Cosimo', 'Fabritio', 'Francesca', 'Galileo', 'Isabetta', 'Lavinia', 'Madalena', 'Minerva', 'Nencia', 'Vinci'];\n\nconst randomName = names[Math.floor(Math.random()*names.length)];\n\ninterface SplashProps {\n  hostLobby: (playerName: string) => void;\n  joinLobby: (code: string, playerName: string) => void;\n  errorMessage: string;\n}\n\nexport default function Splash(props: SplashProps) {\n  const [isChangingName, setIsChangingName] = useState(false);\n\n  const [name, setName] = useState(randomName);\n\n  const [code, setCode] = useState('');\n\n  const handleEnter = (i: any) => { \n    if (i.which === 13) {\n      setIsChangingName(false);\n    }\n  }\n\n  useEffect(() => {\n    if (window.location.pathname.length > 1) {\n      const c = window.location.pathname.replace('/','');\n\n      if (c.length === 4) {\n        setCode(c)\n      }\n    }\n  }, [])\n  \n  return (\n    <SplashScreenStyle>\n      <SplashBackground src={`${process.env.PUBLIC_URL}/splash/splash17.jpg`}>\n        <SplashTitle>Schmeckles</SplashTitle>\n        { props.errorMessage ? <ErrorMessage>{props.errorMessage}</ErrorMessage> : null}\n        <WelcomeStyle>\n          Welcome, \n          {isChangingName \n            ? (\n              <ChangeNameInput type=\"text\" placeholder={name} autoFocus={true} onChange={v => setName(v.target.value)} onKeyPress={handleEnter} />\n            )\n            : (\n              <>\n                &nbsp;\n                <ChosenNameStyle onClick={() => setIsChangingName(true)}>{name}</ChosenNameStyle>! \n                &nbsp;\n                <ChangeNameLink onClick={() => setIsChangingName(true)}>Change Name</ChangeNameLink>\n              </>\n            )\n            }\n        </WelcomeStyle>\n        <HostButton onClick={() => props.hostLobby(name)}>\n          Host a game\n        </HostButton>\n        <JoinGameArea>\n          <JoinGameInput type=\"text\" placeholder=\"Code\" value={code} onChange={(e) => setCode(e.target.value)} />\n          <JoinGameButton disabled={code.length !== 4} onClick={() => props.joinLobby(code, name)}>Join Game</JoinGameButton>\n        </JoinGameArea>\n      </SplashBackground>\n    </SplashScreenStyle>\n  )\n}","import React from \"react\"\nimport styled from \"styled-components\"\nimport { GameTitle } from \"./Splash\"\nimport { Network, Host, Client, HostBroadcastType } from '../Network';\nimport Game, { Player } from '../Game';\n\n\nconst LobbyPageStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`\n\nconst ContentColumnStyle = styled.div`\n  flex-direction: column;\n  display: flex;\n  justify-content: center;\n  text-shadow: 1px 1px 1px #000;\n  text-align: center;\n  color: #fff;\n`\n\nconst PlayerBoxes = styled.div`\n  width: 450px;\n  display: flex;\n  flex-wrap: wrap;\n`\n\nconst PlayerBoxStyle = styled.div`\n  width: 200px;\n  border: 2px solid #ccc;\n  height: 200px;\n  margin: 10px;\n  background: rgba(55,55,55,0.5);\n  text-align: center;\n  color: #fff;\n  text-shadow: 1px 1px 1px #000;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\n\nconst LobbyCode = styled.div`\n  font-size: 24px;\n  padding: 20px;\n`\n\nconst CodeUnderline = styled.input`\n  background: rgba(55,55,55,0.6);\n  font-size: 24px;\n  text-align: center;\n  color: #fff;\n  border: 0;\n  display: inline;\n  width: 80px;\n  text-shadow: 1px 1px 1px #000;\n  text-decoration: underline;\n  padding: 4px 8px;\n  border-radius: 4px;\n  cursor: pointer;\n`\n\nconst ExitLink = styled.a`\n  font-size: 14px;\n  cursor: pointer;\n  border: 1px solid #ff0000;\n  border-radius: 3px;\n  color: #eee;\n  background: rgba(214, 38, 15, 0.5);\n  margin-left: 10px;\n  padding: 4px;\n`\n\nconst StartGameButtonStyle = styled.button`\n  border-radius: 0;\n  font-size: 28px;\n  padding: 10px;\n  background: #91a4e6;\n  border: 2px solid #3451b3;\n  margin: 10px;\n  width: auto;\n`\n\nconst PlayerNameConnectingStyle = styled.span`\n  color: #aaa;\n`\n\ninterface LobbyHostProps {\n  playerName: string;\n  setIsHostingLobby: (t: boolean) => void;\n  setErrorMessage: (err: string) => void;\n}\n\ninterface LobbyHostState {\n  players: Player[]\n  code: string\n}\n\nconst defaultLobbyHostState = {\n  players: [],\n  code: ''\n}\n\nconst game = Game.getInstance();\n\nexport class LobbyHost extends React.Component<LobbyHostProps, LobbyHostState> {\n  player: Player\n  host: Host | null = null\n\n  constructor(props: LobbyHostProps) {\n    super(props);\n    this.player = new Player(props.playerName);\n    this.state = defaultLobbyHostState;\n  }\n\n  componentDidMount() {\n    this.setState({\n      players: [this.player]\n    });\n    this.host = game.newHost(this.player, (err) => this.props.setErrorMessage(err));\n\n    this.setWindowCloseDialog();\n    window.onunload = () => {\n      this.disconnectHost();\n    }\n\n    this.host.host(c => this.setState({ code: c }), p => this.setState({ players: p }));\n    \n  }\n\n  disbandLobby() {\n    if (window.confirm('Are you sure you want to disband this lobby? Players will not be able to join with this lobby code.') && this.props.setIsHostingLobby) {\n      this.props.setIsHostingLobby(false);\n      window.history.pushState({}, 'Schmeckles', '/');\n      document.title = 'Schmeckles';\n    }\n  }\n\n  disconnectHost() {\n    if (this.host) {\n      this.host.disconnect();\n    }\n  }\n\n  cleanupLobby() {\n    window.onbeforeunload = null;\n    this.disconnectHost();\n  }\n\n  componentWillUnmount() {\n    this.cleanupLobby();\n  }\n\n  setWindowCloseDialog() {\n    window.onbeforeunload = (e: any) => {\n      const message = 'Are you sure you want to disband this lobby?';\n      e = e || window.event;\n\n      if (e) {\n        e.returnValue = message;\n      }\n\n      return message;\n    }\n  }\n\n  render() {\n    return (\n      <Lobby code={this.state.code} players={this.state.players} disbandLobby={() => this.disbandLobby()} />\n    )\n  }\n}\n\ninterface LobbyClientProps {\n  playerName: string;\n  joinLobbyCode: string;\n  setJoinLobbyCode: (c: string) => void;\n  setErrorMessage: (err: string) => void;\n}\n\ninterface LobbyClientState {\n  code: string\n  players: Player[]\n}\n\nconst defaultLobbyClientState = {\n  players: [],\n  code: ''\n}\n\nexport class LobbyClient extends React.Component<LobbyClientProps,LobbyClientState> {\n  player: Player\n  client: Client | null = null\n\n  constructor(props: LobbyClientProps) {\n    super(props);\n    this.state = defaultLobbyClientState;\n    this.player = new Player(props.playerName);\n  }\n\n  componentDidMount() {\n    this.setState({ \n      code: this.props.joinLobbyCode \n    });\n\n    this.client = game.newClient(this.player, (err) => this.networkErrorHandler(err));\n    window.onunload = () => this.disconnectClient();\n\n    this.client!.join(this.props.joinLobbyCode, (msg) => {\n      switch (msg.type) {\n        case HostBroadcastType.DISBANDED:\n          this.exitWithErrorMessage('Lobby was disbanded by host');\n          break;\n        case HostBroadcastType.DISCONNECTED:\n          this.exitWithErrorMessage('Disconnected');\n          break;\n        case HostBroadcastType.LOBBY_PLAYERS:\n          this.setState({ players: msg.meta });\n          break;\n\n      }\n    });\n  }\n\n  disconnectClient() {\n    if (this.client) {\n      this.client.disconnect();\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanupLobby();\n  }\n\n  exitWithErrorMessage(msg: string) {\n    this.props.setErrorMessage(msg);\n    this.props.setJoinLobbyCode('');\n  }\n\n  networkErrorHandler(error: any) {\n    if (error.type === 'peer-unavailable') {\n      this.exitWithErrorMessage('Lobby not found');\n    }\n  }\n\n  cleanupLobbyAndExit() {\n    this.cleanupLobby();\n    this.disconnectClient();\n    this.props.setJoinLobbyCode('');\n  }\n\n  cleanupLobby() {\n    window.history.pushState({}, 'Schmeckles', '/');\n    document.title = 'Schmeckles';\n  }\n\n  render() {\n    return (\n      <Lobby code={this.state.code} players={this.state.players} exitLobby={() => this.cleanupLobbyAndExit()} />\n    )\n  }\n}\n\ninterface LobbyProps {\n  code: string;\n  players: Player[];\n  startGame?: () => void;\n  disbandLobby?: () => void;\n  exitLobby?: () => void;\n}\n\nclass Lobby extends React.Component<LobbyProps> {\n  codeInput: React.RefObject<HTMLInputElement>;\n\n  constructor(props: LobbyProps) {\n    super(props);\n    this.codeInput = React.createRef();\n  }\n\n  componentDidUpdate(prevProps: LobbyProps) {\n    if (this.props.code !== prevProps.code) {\n      this.updateBrowserLocation(this.props.code);\n    }    \n  }\n\n  updateBrowserLocation = (c: string) => {\n    window.history.pushState({}, `[${c}] Schmeckles`, `/${c}`)\n    document.title = `[${c}] Schmeckles`\n  }\n\n  copyCodeToClipboard = () => {\n    this.codeInput.current!.select();\n    document.execCommand(\"copy\");\n  }\n\n  render() {\n    return (\n      <LobbyPageStyle>\n        <ContentColumnStyle>\n          <GameTitle />\n          {this.props.code \n            ? (\n              <>\n                <LobbyCode>\n                  Lobby Code: <CodeUnderline ref={this.codeInput} type=\"text\" value={this.props.code} readOnly={true} onClick={this.copyCodeToClipboard} />\n                  {this.props.disbandLobby\n                    ? (\n                    <ExitLink onClick={() => this.props.disbandLobby && this.props.disbandLobby()}>\n                      Disband Lobby\n                    </ExitLink>\n                    )\n                    : null\n                  }\n                  {this.props.exitLobby\n                    ? (\n                      <ExitLink onClick={() => this.props.exitLobby && this.props.exitLobby()}>\n                        Exit Lobby\n                      </ExitLink>\n                    ) \n                    : null\n                  }\n                </LobbyCode>\n              </>\n            )\n            : (\n                <>\n                  Establishing P2P network connection...\n                </>\n              )\n          }\n          <PlayerBoxes>\n          {[...Array(4)].map((p,i) =>\n            <PlayerBoxStyle key={i}>\n              {this.props.players[i] \n                ? (\n                  <>\n                    {!this.props.players[i].connected \n                      ? <PlayerNameConnectingStyle>{this.props.players[i].name}</PlayerNameConnectingStyle>\n                      : <>{this.props.players[i].name}</>\n                    }\n                  </>\n                )\n                : (<>Waiting for players...</>)\n              }\n              \n            </PlayerBoxStyle>\n          )}\n          </PlayerBoxes>\n          {this.props.players.length < 2\n            ? <p>At least two players needed to start game.</p>\n            : null}\n\n          {this.props.startGame \n            ? (\n              <StartGameButtonStyle disabled={this.props.players.length < 2} onClick={() => this.props.startGame && this.props.startGame()}>Start Game</StartGameButtonStyle>\n            )\n            : null\n          }\n        </ContentColumnStyle>\n      </LobbyPageStyle>\n    )\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Game, { GameState } from './Game';\nimport GameUI from './Ui/Game';\nimport { LobbyClient, LobbyHost } from './Ui/Lobby';\nimport Splash, { SplashBackground } from './Ui/Splash';\n\nconst AppStyle = styled.div`\n  height: 100%;\n`\n\nconst game = Game.getInstance();\n\nconst App = () => {\n\n  const [isHostingLobby, setIsHostingLobby] = useState(false);\n  const [playerName, setPlayerName] = useState('');\n  const [joinLobbyCode, setJoinLobbyCode] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [gameState, setGameState] = useState({ background: '' });\n\n  useEffect(() => {\n    game.onStateUpdate((gs: GameState) => {\n      setGameState(gs);\n    })\n  }, [])\n  \n\n  const startLobbyHost = (playerName: string) => {\n    setIsHostingLobby(true);\n    setPlayerName(playerName);\n  }\n\n  const startLobbyClient = (code: string, playerName:string) => {\n    setJoinLobbyCode(code);\n    setPlayerName(playerName);\n  }\n\n  return (\n    <>\n      {!isHostingLobby && !joinLobbyCode ? <Splash hostLobby={startLobbyHost} joinLobby={startLobbyClient} errorMessage={errorMessage} /> \n        : <SplashBackground src={gameState.background}>\n            <AppStyle>\n              {isHostingLobby ? <LobbyHost playerName={playerName} setIsHostingLobby={setIsHostingLobby} setErrorMessage={setErrorMessage} /> : null}\n              {joinLobbyCode ? <LobbyClient playerName={playerName} joinLobbyCode={joinLobbyCode} setErrorMessage={setErrorMessage} setJoinLobbyCode={setJoinLobbyCode} /> : null}\n            </AppStyle>\n        </SplashBackground>\n      }\n    </>\n  )\n};\n\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}