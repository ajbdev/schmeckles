{"version":3,"sources":["../node_modules/peerjs/dist sync","Ui/Splash.tsx","Network.ts","Actions.ts","Rules.ts","Game.ts","Ui/Lobby.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","SplashScreenStyle","styled","div","SplashBackgroundStyle","attrs","props","imageSrc","bgColor","SplashTitle","h1","GameTitleStyle","h2","GameTitle","HostButton","button","JoinGameArea","JoinGameInput","input","JoinGameButton","SplashBackground","state","background","src","color","this","loadBackground","a","process","Math","floor","random","fac","FastAverageColor","getColorAsync","setState","hex","children","React","Component","ChangeNameLink","WelcomeStyle","p","ChosenNameStyle","ChangeNameInput","ErrorMessage","names","randomName","length","Splash","useState","isChangingName","setIsChangingName","name","setName","setCode","useEffect","window","location","pathname","c","replace","errorMessage","type","placeholder","autoFocus","onChange","v","target","value","onKeyPress","i","which","onClick","hostLobby","disabled","joinLobby","HostBroadcastType","ClientMessageType","Action","Network","player","onError","err","connectionId","peer","debugLevel","createConnectionId","Peer","fullyQualifiedId","debug","on","Host","clients","players","toString","substr","toUpperCase","onConnect","onPlayerUpdate","connected","client","metadata","push","broadcast","LOBBY_PLAYERS","meta","console","log","splice","findIndex","data","m","forEach","send","DISBANDED","disconnect","Client","onHostBroadcast","conn","connect","DISCONNECTED","connections","close","gameHasEnoughPlayers","passed","message","gameHasNotStarted","started","gameHasStarted","isPlayersTurn","turn","indexOf","Gem","Tier","BaseAction","rules","failedRules","gameState","r","result","t","ActionToBePerformed","JoinGame","StartGame","TakeGems","PurchaseCard","ReserveCard","moveGems","from","to","amount","Object","gemType","g","isContextPlayer","contextPlayer","gems","desired","filter","star","totalGems","values","reduce","b","result1","gem","bank","canTakeTwoGems","canTakeThreeGems","isTakingTwoOrThreeGems","nextTurn","cards","index","card","costs","canAffordCard","reserved","reservedCards","emptyGemStash","Ruby","Sapphire","Diamond","Onyx","Emerald","Star","shuffle","arr","reduceRight","res","_","__","s","Card","points","tier","CardPile","n","destination","GameState","tierICards","tierIICards","tierIIICards","tierIDrawPile","tierIIDrawPile","tierIIIDrawPile","nobles","cardsJson","map","ruby","sapphire","diamond","onyx","emerald","noblesJson","I","II","III","drawVisibleCards","draw","Player","onStateUpdateCallback","playerId","callback","actionType","action","create","receiveAction","checkRules","act","alert","Game","instance","undefined","getInstance","LobbyPageStyle","ContentColumnStyle","PlayerBoxes","PlayerBoxStyle","LobbyCode","CodeUnderline","ExitLink","StartGameButtonStyle","PlayerNameConnectingStyle","span","defaultLobbyHostState","LobbyHost","host","playerName","networkErrorHandler","setWindowCloseDialog","onunload","confirm","setIsHostingLobby","history","pushState","document","title","onbeforeunload","cleanupLobby","event","returnValue","error","disbandLobby","startGame","defaultLobbyClientState","LobbyClient","joinLobbyCode","join","msg","exitWithErrorMessage","setErrorMessage","setJoinLobbyCode","exitLobby","cleanupLobbyAndExit","Lobby","codeInput","updateBrowserLocation","copyCodeToClipboard","current","select","execCommand","createRef","prevProps","ref","readOnly","Array","AppStyle","App","isHostingLobby","setPlayerName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kzTAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,+MCHnBC,EAAoBC,IAAOC,IAAV,yGAYVC,EAAwBF,IAAOC,IAAIE,OAAM,SAACC,GAAD,MAA+B,CACnFC,SAAUD,EAAMC,SAChBC,QAASF,EAAME,SAAW,aAFSN,CAAH,2MAIR,SAAAI,GAAK,OAAIA,EAAMC,YACnB,SAAAD,GAAK,OAAIA,EAAME,WAO/BC,EAAcP,IAAOQ,GAAV,iJAQXC,EAAiBT,IAAOU,GAAV,iLASPC,EAAY,kBACvB,cAACF,EAAD,0BAGIG,EAAaZ,IAAOa,OAAV,8JASVC,EAAed,IAAOC,IAAV,qFAMZc,EAAgBf,IAAOgB,MAAV,mKASbC,EAAiBjB,IAAOa,OAAV,oLAoBPK,EAAb,kDAGE,WAAYd,GAA+B,IAAD,8BACxC,cAAMA,IAHRe,WAE0C,EAGxC,EAAKA,MAAQ,CACXC,WAAY,CACVC,IAAKjB,EAAMiB,KAAO,GAClBC,MAAO,KAN6B,EAH5C,qDAcE,WACEC,KAAKC,mBAfT,mEAkBE,gCAAAC,EAAA,6DACQJ,EAAME,KAAKnB,MAAMiB,KAAX,UAAqBK,cAArB,yBAA4DC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAe,EAA3F,QACNC,EAAM,IAAIC,IAFlB,SAIsBD,EAAIE,cAAcX,GAJxC,OAIQC,EAJR,OAMEC,KAAKU,SAAS,CAAEb,WAAY,CAAEC,IAAKA,EAAKC,MAAOA,EAAMY,OANvD,gDAlBF,0EA2BE,WACE,OACE,cAAChC,EAAD,CAAuBG,SAAUkB,KAAKJ,MAAMC,WAAWC,IAAKf,QAASiB,KAAKJ,MAAMC,WAAWE,MAA3F,SACGC,KAAKnB,MAAM+B,eA9BpB,GAAsCC,IAAMC,WAoCtCC,EAAiBtC,IAAOyB,EAAV,kGAMdc,EAAevC,IAAOwC,EAAV,8IAQZC,EAAkBzC,IAAOyB,EAAV,mFAKfiB,EAAkB1C,IAAOgB,MAAV,+HAQf2B,EAAe3C,IAAOC,IAAV,uKASZ2C,EAAQ,CAAC,QAAQ,WAAW,MAAM,OAAO,OAAO,WAAW,UAAO,SAAS,WAAW,SAAS,SAAS,YAAY,OAAO,WAAY,QAAS,WAAY,SAAU,OAAQ,UAAW,SAAU,WAAY,YAAa,UAAW,WAAY,UAAW,WAAY,UAAW,SAAU,SAE/RC,EAAaD,EAAMjB,KAAKC,MAAMD,KAAKE,SAASe,EAAME,SAQzC,SAASC,EAAO3C,GAAqB,IAAD,EACL4C,oBAAS,GADJ,mBAC1CC,EAD0C,KAC1BC,EAD0B,OAGzBF,mBAASH,GAHgB,mBAG1CM,EAH0C,KAGpCC,EAHoC,OAKzBJ,mBAAS,IALgB,mBAK1CvD,EAL0C,KAKpC4D,EALoC,KAuBjD,OAVAC,qBAAU,WACR,GAAIC,OAAOC,SAASC,SAASX,OAAS,EAAG,CACvC,IAAMY,EAAIH,OAAOC,SAASC,SAASE,QAAQ,IAAI,IAE9B,IAAbD,EAAEZ,QACJO,EAAQK,MAGX,IAGD,cAAC3D,EAAD,UACE,eAAC,EAAD,CAAkBsB,IAAG,UAAKK,cAAL,wBAArB,UACE,cAACnB,EAAD,yBACEH,EAAMwD,aAAe,cAACjB,EAAD,UAAevC,EAAMwD,eAA+B,KAC3E,eAACrB,EAAD,sBAEGU,EAEG,cAACP,EAAD,CAAiBmB,KAAK,OAAOC,YAAaX,EAAMY,WAAW,EAAMC,SAAU,SAAAC,GAAC,OAAIb,EAAQa,EAAEC,OAAOC,QAAQC,WAzBjG,SAACC,GACH,KAAZA,EAAEC,OACJpB,GAAkB,MA0BV,4CAEE,cAACT,EAAD,CAAiB8B,QAAS,kBAAMrB,GAAkB,IAAlD,SAA0DC,IAF5D,SAIE,cAACb,EAAD,CAAgBiC,QAAS,kBAAMrB,GAAkB,IAAjD,+BAKR,cAACtC,EAAD,CAAY2D,QAAS,kBAAMnE,EAAMoE,UAAUrB,IAA3C,yBAGA,eAACrC,EAAD,WACE,cAACC,EAAD,CAAe8C,KAAK,OAAOC,YAAY,OAAOK,MAAO1E,EAAMuE,SAAU,SAACzE,GAAD,OAAO8D,EAAQ9D,EAAE2E,OAAOC,UAC7F,cAAClD,EAAD,CAAgBwD,SAA0B,IAAhBhF,EAAKqD,OAAcyB,QAAS,kBAAMnE,EAAMsE,UAAUjF,EAAM0D,IAAlF,+B,IC9NEwB,EAWPC,E,4BAXOD,K,sBAAAA,E,4BAAAA,E,+BAAAA,M,cAWPC,K,+BAAAA,M,KASE,ICpBKC,GDoBUC,GAAtB,WAOE,WAAYC,EAAgBC,GAA8B,yBAN1DA,QAAU,SAACC,KAM8C,KALzDF,YAKyD,OAJzDG,kBAIyD,OAHzDC,UAGyD,OAFzDC,gBAEyD,EACvD7D,KAAKwD,OAASA,EACdxD,KAAK6D,WAAa,EAClB7D,KAAK2D,aAAe3D,KAAK8D,qBACzB9D,KAAK4D,KAAO,IAAIG,KAAK/D,KAAKgE,iBAAiBhE,KAAK2D,cAAe,CAAEM,MAAOjE,KAAK6D,aAE7E7D,KAAK4D,KAAKM,GAAG,QAAST,GAb1B,oDAgBE,SAAiBvF,GACf,MAAM,cAAN,OAAsBA,OAjB1B,KAuBaiG,GAAb,4MACEC,QAAiC,GADnC,EAEEC,QAAoB,GAFtB,wDAIE,WACE,OAAOjE,KAAKE,SAASgE,SAAS,IAAIC,OAAO,EAAG,GAAGC,gBALnD,kBAQE,SAAKC,EAAmCC,GAAwC,IAAD,OAC7E1E,KAAKwD,OAAOmB,WAAY,EACxB3E,KAAKqE,QAAU,CAACrE,KAAKwD,QAErBxD,KAAK4D,KAAKM,GAAG,QAAQ,SAAC3F,GACpBkG,EAAU,EAAKd,cAEf,EAAKC,KAAKM,GAAG,cAAc,SAACU,GAE1B,IAAMpB,EAASoB,EAAOC,SAClB,EAAKR,QAAQ9C,OAAS,GAAKiC,EAAO5B,KAAKL,OAAS,IAClD,EAAK8C,QAAQS,KAAKtB,GAClB,EAAKY,QAAQU,KAAKF,GAElBF,EAAe,EAAKL,SACpB,EAAKU,UAAU,CAAEzC,KAAMc,EAAkB4B,cAAeC,KAAM,EAAKZ,WAGrEO,EAAOV,GAAG,QAAQ,WAChBU,EAAOC,SAASF,WAAY,EAE5B,EAAKI,UAAU,CAAEzC,KAAMc,EAAkB4B,cAAeC,KAAM,EAAKZ,UACnEK,EAAe,EAAKL,YAGtBO,EAAOV,GAAG,SAAS,WACjBgB,QAAQC,IAAI,0BAA4BP,EAAOC,SAASjD,MACxD,EAAKyC,QAAQe,OAAO,EAAKf,QAAQgB,WAAU,SAAApE,GAAC,OAAIA,EAAE0C,eAAiBiB,EAAOhB,QAAO,GACjF,EAAKmB,UAAU,CAAEzC,KAAMc,EAAkB4B,cAAeC,KAAM,EAAKZ,UACnEK,EAAe,EAAKL,YAItBO,EAAOV,GAAG,QAAQ,SAASoB,GACzBJ,QAAQC,IAAI,WAAYG,cA1ClC,uBAgDE,SAAUC,GACRL,QAAQC,IAAI,iBAAkBI,GAE9BvF,KAAKoE,QAAQoB,SAAQ,SAAArD,GACnBA,EAAEsD,KAAKF,QApDb,wBAwDE,WACEvF,KAAK+E,UAAU,CAAEzC,KAAMc,EAAkBsC,YACzC1F,KAAK4D,KAAK+B,iBA1Dd,GAA0BpC,IA8DbqC,GAAb,4MACE1H,KAAe,GADjB,wDAGE,WACE,OAAOkC,KAAKE,SAASgE,SAAS,IAAIC,OAAO,EAAG,MAJhD,kBAOE,SAAKrG,EAAc2H,GAAyD,IAAD,OACzE7F,KAAK4D,KAAKM,GAAG,QAAQ,SAAC3F,GACpB,EAAKiF,OAAOG,aAAe,EAAKK,iBAAiB,EAAKL,cAEtD,IAAMmC,EAAO,EAAKlC,KAAKmC,QAAQ,EAAK/B,iBAAiB9F,GAAO,CAAE2G,SAAU,EAAKrB,SAC7E,EAAKtF,KAAOA,EAEZ4H,EAAK5B,GAAG,QAAQ,WAEd4B,EAAK5B,GAAG,QAAQ,SAACoB,GACfJ,QAAQC,IAAI,uBAAwBG,GACpCO,EAAgBP,MAGlBQ,EAAK5B,GAAG,SAAS,WACf2B,EAAgB,CAAEvD,KAAMc,EAAkB4C,0BAtBpD,wBA4BE,WACEhG,KAAK4D,KAAKqC,YAAYjG,KAAKgE,iBAAiBhE,KAAK9B,OAAO,GAAGgI,YA7B/D,GAA4B3C,I,mCE5Ff4C,GAAuB,SAAC9B,GACnC,MAAO,CACL+B,OAAQ/B,EAAQ9C,OAAS,EACzB8E,QAAS,gDAIAC,GAAoB,SAACC,GAChC,MAAO,CACLH,QAASG,EACTF,QAAS,8BAIAG,GAAiB,SAACD,GAC7B,MAAO,CACLH,OAAQG,EACRF,QAAS,gCAIAI,GAAgB,SAACjD,EAAgBa,EAAmBqC,GAC/D,MAAO,CACLN,OAAS/B,EAAQsC,QAAQnD,GAAQ,IAAOkD,EACxCL,QAAS,iD,SDrCD/C,K,oBAAAA,E,sBAAAA,E,oBAAAA,E,0BAAAA,E,6BAAAA,Q,KAiBL,IEIKsD,GASAC,GFbUC,GAAtB,WAME,WAAY7F,GAAY,yBALxBqB,UAKuB,OAJvBkB,YAIuB,OAHvBuD,WAGuB,OAFvBC,iBAEuB,EACrBhH,KAAKwD,OAASvC,EACdjB,KAAK+G,MAAQ,GACb/G,KAAKgH,YAAc,GATvB,8CA0BE,SAAWC,GAA0C,IAAD,OASlD,OARAjH,KAAK+G,MAAMvB,SAAQ,SAAA0B,GACjB,IAAMC,EAASD,EAAED,GAEZE,EAAOf,QACV,EAAKY,YAAYlC,KAAKqC,QAItBnH,KAAKgH,YAAYzF,OAAS,KAnClC,sBAyCE,SAAS0F,GACP,IAAIP,EAAOO,EAAUP,KAAO,EAExBA,EAAOO,EAAU5C,QAAQ9C,SAC3BmF,EAAO,GAGTO,EAAUP,KAAOA,KAhDrB,qBAYE,SAAczF,EAAWmG,EAAWnC,GAAY,IAAD,EAW7C,OAAO,IAAIoC,GAVW,oBACnB/D,GAAOgE,SAAWA,IADC,eAEnBhE,GAAOiE,UAAYA,IAFA,eAGnBjE,GAAOkE,SAAWA,IAHC,eAInBlE,GAAOmE,aAAeA,IAJH,eAKnBnE,GAAOoE,YAAcA,IALF,GAQuBN,IAEdnG,EAAxB,gBAA+BgE,QAvB1C,KAsDM0C,GAAW,SAACC,EAAgBC,EAAcC,GAC9CC,OAAO5J,KAAKyJ,GAAMpC,SAAQ,SAAAwC,GACxBJ,EAAKI,IAAmBF,EAAOE,GAC/BH,EAAGG,IAAmBF,EAAOE,OAIpBT,GAAb,kDACE,WAAYtG,EAAWgE,GAAW,IAAD,8BAC/B,cAAMhE,IACDqB,KAAOgB,GAAOiE,UAEnB,EAAKR,MAAQ,CACX,SAACkB,GAAD,OAA4B9B,GAAqB8B,EAAE5D,UACnD,SAAC4D,GAAD,OAA4B3B,GAAkB2B,EAAE1B,WANnB,EADnC,uCAYE,SAAIU,GACFA,EAAUV,SAAU,EACpBU,EAAUP,KAAO,MAdrB,GAA+BI,IAkBlBQ,GAAb,kDAEE,WAAYrG,EAAWgE,GAAqC,IAAD,8BACzD,cAAMhE,IAFRiH,qBAC2D,EAEzD,EAAK5F,KAAOgB,GAAOgE,SACnB,EAAKY,gBAAkBjD,EAAKiD,gBAC5B,EAAKnB,MAAQ,CACX,SAACkB,GAAD,MC3DG,CACL7B,OD0D4C6B,EAAE5D,QC1D9B9C,OAHG,EAInB8E,QAAS,uBD0DP,SAAC4B,GAAD,OAA4B3B,GAAkB2B,EAAE1B,WANO,EAF7D,uCAYE,SAAIU,GACFA,EAAU5C,QAAQS,KAAK9E,KAAKwD,QAExBxD,KAAKkI,kBACPjB,EAAUkB,cAAgBnI,KAAKwD,YAhBrC,GAA8BsD,IAqBjBU,GAAb,kDAGE,WAAYvG,EAAWgE,GAA2B,IAAD,8BAC/C,cAAMhE,IAHRmH,UAEiD,EAG/C,EAAK9F,KAAOgB,GAAOkE,SACnB,EAAKY,KAAOnD,EAAKmD,KACjB,EAAKrB,MAAQ,CACX,SAACkB,GAAD,OAA4BzB,GAAeyB,EAAE1B,UAC7C,SAAC0B,GAAD,OAA4B9B,GAAqB8B,EAAE5D,UACnD,SAAC4D,GAAD,OAA4BxB,GAAc,EAAKjD,OAAQyE,EAAE5D,QAAS4D,EAAEvB,OACpE,SAACuB,GAAD,OC3B4BI,ED2BkB,EAAKD,KC3BJR,ED2BUK,EAAEG,KCxBxD,CACLhC,OAAsB,IAHN2B,OAAO5J,KAAKkK,GAASC,QAAO,SAAAN,GAAO,OAAIK,EAAQL,GAAkBJ,EAAKI,MAAiBzG,OAIvG8E,QAAS,wDALoB,IAACgC,EAAmBT,GD4B/C,SAACK,GAAD,MChDG,CACL7B,OAAyB,ID+CiB,EAAKgC,KC/C/BG,KAChBlC,QAAS,qCD+CP,SAAC4B,GACC,ICxE0BI,EDwEpBG,EAAYT,OAAOU,OAAO,EAAKL,MAAMM,QAAO,SAACxI,EAAEyI,GAAH,OAASzI,EAAEyI,KAE7D,GAAkB,IAAdH,EAAiB,CACnB,IAAMI,GC3EkBP,ED2EU,EAAKD,KC1ExC,CACLhC,OAA6D,IAArD2B,OAAOU,OAAOJ,GAASC,QAAO,SAAA5F,GAAC,OAAIA,EAAI,KAAGnB,OAClD8E,QAAS,wDD0EH,OAAKuC,EAAQxC,OCtEO,SAACyC,EAAUC,GACvC,MAAO,CACL1C,OAAQ0C,EAAKD,IAAQ,EACrBxC,QAAS,sFDyEI0C,CAFKhB,OAAO5J,KAAK,EAAKiK,MAAME,QAAO,SAAAL,GAAC,OAA2B,GAAvB,EAAKG,KAAKH,MAAgB,GAEvCA,EAAEG,MAL3BQ,EAOX,OAAkB,IAAdJ,ECvEoB,SAACH,GAC/B,MAAO,CACLjC,OAA2E,IAAnE2B,OAAO5J,KAAKkK,GAASC,QAAO,SAAAL,GAAC,OAAII,EAAQJ,GAAY,KAAG1G,OAChE8E,QAAS,uDDqEI2C,CAAiB,EAAKZ,MCnDD,SAACI,GACrC,MAAO,CACLpC,OAAQoC,GAAa,GAAKA,GAAa,EACvCnC,QAAS,iDDmDE4C,CAAuBT,KA7Ba,EAHnD,uCAqCE,SAAIvB,GACFU,GAASV,EAAUmB,KAAMpI,KAAKwD,OAAO4E,KAAMpI,KAAKoI,MAChDpI,KAAKkJ,SAASjC,OAvClB,GAA8BH,IA2CjBW,GAAb,kDAIE,WAAYxG,EAAWgE,GAAyC,IAAD,8BAC7D,cAAMhE,IAJRkI,WAG+D,IAF/DC,WAE+D,EAG7D,EAAK9G,KAAOgB,GAAOmE,aACnB,EAAK2B,MAAQnE,EAAKmE,MAClB,EAAKD,MAAQlE,EAAKkE,MAElB,EAAKpC,MAAQ,CACX,SAACkB,GAAD,OAA4BzB,GAAeyB,EAAE1B,UAC7C,SAAC0B,GAAD,OAA4B9B,GAAqB8B,EAAE5D,UACnD,SAAC4D,GAAD,OAA4BxB,GAAc,EAAKjD,OAAQyE,EAAE5D,QAAS4D,EAAEvB,OACpE,SAACuB,GAGC,OChIqB,SAACoB,EAAY7F,GAGxC,MAAO,CACL4C,OAAsB,IAHN2B,OAAO5J,KAAKkL,EAAKC,OAAOhB,QAAO,SAAAN,GAAO,OAAIqB,EAAKC,MAAMtB,GAAkBxE,EAAO4E,KAAKJ,GAAgBxE,EAAO2F,MAAMA,MAAMb,QAAO,SAAAnG,GAAC,OAAIA,EAAE0G,MAAQjC,GAAIoB,MAA8BzG,UAAQA,OAItM8E,QAAS,0CD2HEkD,CAFM,EAAKJ,MAAM,EAAKC,OAEF,EAAK5F,UAdyB,EAJjE,uCAuBE,SAAIyD,GACF,IAAMoC,EAAOrJ,KAAKmJ,MAAM/D,OAAOpF,KAAKoJ,MAAM,GAAG,GAE7CzB,GAAS3H,KAAKwD,OAAO4E,KAAMnB,EAAUmB,KAAMiB,EAAKC,OAE5CD,EAAKG,WACPH,EAAKG,UAAW,GAGlBxJ,KAAKwD,OAAO2F,MAAMA,MAAMrE,KAAKuE,GAC7BrJ,KAAKkJ,SAASjC,OAjClB,GAAkCH,IAqCrBY,GAAb,kDAIE,WAAYzG,EAAWgE,GAAyC,IAAD,8BAC7D,cAAMhE,IAJRkI,WAG+D,IAF/DC,WAE+D,EAG7D,EAAK9G,KAAOgB,GAAOoE,YACnB,EAAKyB,MAAQlE,EAAKkE,MAClB,EAAKC,MAAQnE,EAAKmE,MAElB,EAAKrC,MAAQ,CACX,SAACkB,GAAD,OAA4BzB,GAAeyB,EAAE1B,UAC7C,SAAC0B,GAAD,OAA4B9B,GAAqB8B,EAAE5D,UACnD,SAAC4D,GAAD,OAA4BxB,GAAc,EAAKjD,OAAQyE,EAAE5D,QAAS4D,EAAEvB,OACpE,SAACuB,GAAD,MC3HG,CACL7B,OD0H6C,EAAK5C,OC1HnCiG,cAAclI,OAAS,EACtC8E,QAAS,+CD8GoD,EAJjE,uCAmBE,SAAIY,GACF,IAAMoC,EAAOrJ,KAAKmJ,MAAM/D,OAAOpF,KAAKoJ,MAAM,GAAG,GAEvChB,EAAOsB,KACbtB,EAAKG,KAAO,EAEZZ,GAASV,EAAUmB,KAAMpI,KAAKwD,OAAO4E,KAAMA,GAE3CiB,EAAKG,UAAW,EAEhBxJ,KAAKwD,OAAOiG,cAAc3E,KAAKuE,GAC/BrJ,KAAKkJ,SAASjC,OA9BlB,GAAiCH,K,SEhLrBF,K,YAAAA,E,oBAAAA,E,YAAAA,E,kBAAAA,E,kBAAAA,E,aAAAA,Q,cASAC,O,SAAAA,I,WAAAA,I,cAAAA,Q,KAmBL,I,2BAAM6C,GAAgB,WAAO,IAAD,EACjC,OAAO,EAAP,kBACG9C,GAAI+C,KAAO,GADd,eAEG/C,GAAIgD,SAAW,GAFlB,eAGGhD,GAAIiD,QAAU,GAHjB,eAIGjD,GAAIkD,KAAO,GAJd,eAKGlD,GAAImD,QAAU,GALjB,eAMGnD,GAAIoD,KAAO,GANd,GAyCIC,GAAU,SAACC,GAAD,OACd,YAAIA,GAAKC,aAAY,SAACC,EAAIC,EAAEC,EAAGC,GAAV,OAClBH,EAAItF,KAAKyF,EAAEnF,OAAO,EAAEhF,KAAKE,SAASiK,EAAEhJ,OAAO,GAAG,IAAK6I,IAAM,KAEjDI,GAOX,WAAYC,EAAgB5B,EAAU6B,EAAYpB,GAAkB,yBANpEmB,YAMmE,OALnE5B,SAKmE,OAJnE6B,UAImE,OAHnEpB,WAGmE,OAFnEE,cAEmE,EACjExJ,KAAKyK,OAASA,EACdzK,KAAK6I,IAAMA,EACX7I,KAAK0K,KAAOA,EACZ1K,KAAKsJ,MAAQA,GAIJqB,GAAb,WAIE,WAAYD,EAAavB,GAAiB,yBAH1CA,WAGyC,OAFzCuB,UAEyC,EACnCA,IAAM1K,KAAK0K,KAAOA,GAGpB1K,KAAKmJ,MADHA,EACWc,GAAQd,GAER,GAVnB,wCAcE,SAAKyB,EAAWC,GACd7K,KAAKmJ,MAAM/D,OAAO,EAAGwF,GAAGpF,SAAQ,SAAArD,GAAC,OAAI0I,EAAY1B,MAAMrE,KAAK3C,UAfhE,KAqBa2I,GAAb,WAcE,aAAe,IAAD,2BAbdC,gBAac,OAZdC,iBAYc,OAXdC,kBAWc,OAVdC,mBAUc,OATdC,oBASc,OARdC,qBAQc,OAPdC,YAOc,OANdjD,UAMc,OALd/D,aAKc,OAJdkC,aAIc,OAHd4B,mBAGc,OAFdzB,UAEc,EACZ,IAAMyC,EAAoCmC,GAvEmCC,KAC/E,SAAApJ,GAAC,aAAI,IAAIqI,GACPrI,EAAEsI,QAAU,EACZtI,EAAE0G,IACF1G,EAAEuI,MAHC,oBAKA9D,GAAI+C,KAAOxH,EAAEqJ,MAAQ,GALrB,eAMA5E,GAAIgD,SAAWzH,EAAEsJ,UAAY,GAN7B,eAOA7E,GAAIiD,QAAU1H,EAAEuJ,SAAW,GAP3B,eAQA9E,GAAIkD,KAAO3H,EAAEwJ,MAAQ,GARrB,eASA/E,GAAImD,QAAU5H,EAAEyJ,SAAW,GAT3B,eAUAhF,GAAIoD,KAAO,GAVX,OAuEGqB,EAASpB,GAAsC4B,GAvF+BN,KACtF,SAAAX,GAAM,IAAD,EACH,MAAO,CACLH,OAAQG,EAAEH,OACVnB,OAAK,oBACF1C,GAAI+C,KAAOiB,EAAEY,MAAQ,GADnB,eAEF5E,GAAIgD,SAAWgB,EAAEa,UAAY,GAF3B,eAGF7E,GAAIiD,QAAUe,EAAEc,SAAW,GAHzB,eAIF9E,GAAIkD,KAAOc,EAAEe,MAAQ,GAJnB,eAKF/E,GAAImD,QAAUa,EAAEgB,SAAW,GALzB,QAqFP5L,KAAKqE,QAAU,GACfrE,KAAKqL,OAASA,EAAOjG,OAAO,EAAG,GAE/BpF,KAAK+K,WAAa,IAAIJ,GAAS9D,GAAKiF,EAAG,IACvC9L,KAAKgL,YAAc,IAAIL,GAAS9D,GAAKkF,GAAI,IACzC/L,KAAKiL,aAAe,IAAIN,GAAS9D,GAAKmF,IAAK,IAE3ChM,KAAKkL,cAAgB,IAAIP,GAAS9D,GAAKiF,EAAG3C,EAAMb,QAAO,SAAAnG,GAAC,OAAIA,EAAEuI,OAAS7D,GAAKiF,MAC5E9L,KAAKmL,eAAiB,IAAIR,GAAS9D,GAAKkF,GAAI5C,EAAMb,QAAO,SAAAnG,GAAC,OAAIA,EAAEuI,OAAS7D,GAAKkF,OAC9E/L,KAAKoL,gBAAkB,IAAIT,GAAS9D,GAAKmF,IAAK7C,EAAMb,QAAO,SAAAnG,GAAC,OAAIA,EAAEuI,OAAS7D,GAAKmF,QAEhFhM,KAAKiM,mBACLjM,KAAK0G,KAAO,EACZ1G,KAAKuG,SAAU,EAEfvG,KAAKoI,MAAL,oBACGxB,GAAI+C,KAAO,GADd,eAEG/C,GAAIgD,SAAW,GAFlB,eAGGhD,GAAIiD,QAAU,GAHjB,eAIGjD,GAAIkD,KAAO,GAJd,eAKGlD,GAAImD,QAAU,GALjB,eAMGnD,GAAIoD,KAAO,GANd,GAjCJ,oDA2CE,WACEhK,KAAKkL,cAAcgB,KAAK,EAAElM,KAAK+K,WAAW5B,MAAM5H,OAAQvB,KAAK+K,YAC7D/K,KAAKmL,eAAee,KAAK,EAAElM,KAAKgL,YAAY7B,MAAM5H,OAAQvB,KAAKgL,aAC/DhL,KAAKoL,gBAAgBc,KAAK,EAAElM,KAAKiL,aAAa9B,MAAM5H,OAAQvB,KAAKiL,kBA9CrE,KAkDakB,GAUX,WAAYvK,GAAe,yBAT3BrD,QAS0B,OAR1BqD,UAQ0B,OAP1BwG,UAO0B,OAN1Be,WAM0B,OAL1BM,mBAK0B,OAJ1B4B,YAI0B,OAH1B1G,eAG0B,OAF1BhB,kBAE0B,EACxB3D,KAAKzB,GAAKqD,EACV5B,KAAK4B,KAAOA,EACZ5B,KAAKoI,KAAOsB,KACZ1J,KAAKmJ,MAAQ,IAAIwB,GACjB3K,KAAKyJ,cAAgB,GACrBzJ,KAAKqL,OAAS,GACdrL,KAAK2E,WAAY,EACjB3E,KAAK2D,aAAe,K,WAUtB,aAAuB,yBAJvBsD,eAIsB,OAFdmF,2BAEc,EACpBpM,KAAKiH,UAAY,IAAI6D,GACrB9K,KAAKoM,sBAAwB,K,6CAW/B,SAAUC,GACR,OAAOrM,KAAKiH,UAAU5C,QAAQiE,QAAO,SAAArH,GAAC,OAAIA,EAAE1C,KAAO8N,KAAU,K,2BAG/D,SAAcC,GACZtM,KAAKoM,sBAAwBE,I,wBAG/B,SAAW9I,EAAgB+I,EAAoBjH,GAC7C,IAAMkH,EAAS1F,GAAW2F,OACxBjJ,EACA+I,EACAjH,GAGFtF,KAAK0M,cAAcF,K,2BASrB,SAAcA,GACRA,EAAOG,WAAW3M,KAAKiH,WACzBuF,EAAOI,IAAI5M,KAAKiH,WAEhBuF,EAAOxF,YAAYuE,KAAI,SAAArL,GAAC,OAAI2M,MAAM3M,EAAEmG,YAElCrG,KAAKoM,uBACPpM,KAAKoM,sBAAsBpM,KAAKiH,c,0BAvCpC,WAKE,OAJK6F,EAAKC,WACRD,EAAKC,SAAW,IAAID,GAGfA,EAAKC,W,mBAqBd,WAGE,OAFAD,EAAKC,cAAWC,EAEThN,KAAKiN,kB,MArCCF,c,EC1MjB,I,GAAMG,GAAiBzO,IAAOC,IAAV,oGAMdyO,GAAqB1O,IAAOC,IAAV,gLASlB0O,GAAc3O,IAAOC,IAAV,qFAMX2O,GAAiB5O,IAAOC,IAAV,kSAcd4O,GAAY7O,IAAOC,IAAV,oEAKT6O,GAAgB9O,IAAOgB,MAAV,+SAeb+N,GAAW/O,IAAOyB,EAAV,yNAWRuN,GAAuBhP,IAAOa,OAAV,gLAUpBoO,GAA4BjP,IAAOkP,KAAV,8CAezBC,GAAwB,CAC5BvJ,QAAS,GACTnG,KAAM,IAGK2P,GAAb,kDAIE,WAAYhP,GAAwB,IAAD,8BACjC,cAAMA,IAJR2E,YAGmC,IAFnCsK,UAEmC,EAEjC,EAAKtK,OAAS,IAAI2I,GAAOtN,EAAMkP,YAC/B,EAAKnO,MAAQgO,GACb,EAAKE,KAAO,IAAI3J,GAAK,EAAKX,QAAQ,SAACE,GAAD,OAAS,EAAKsK,oBAAoBtK,MAJnC,EAJrC,qDAWE,WAAqB,IAAD,OAClB1D,KAAKU,SAAS,CACZ2D,QAAS,CAACrE,KAAKwD,UAGjBxD,KAAKiO,uBACLjM,OAAOkM,SAAW,kBAAM,EAAKJ,KAAKnI,cAElC3F,KAAK8N,KAAKA,MAAK,SAAA3L,GAAC,OAAI,EAAKzB,SAAS,CAAExC,KAAMiE,OAAM,SAAAlB,GAAC,OAAI,EAAKP,SAAS,CAAE2D,QAASpD,SAnBlF,0BAuBE,WACMe,OAAOmM,QAAQ,wGAA0GnO,KAAKnB,MAAMuP,oBACtIpO,KAAKnB,MAAMuP,mBAAkB,GAC7BpM,OAAOqM,QAAQC,UAAU,GAAI,aAAc,KAC3CC,SAASC,MAAQ,gBA3BvB,0BA+BE,WACExM,OAAOyM,eAAiB,KACxBzO,KAAK8N,KAAKnI,eAjCd,kCAoCE,WACE3F,KAAK0O,iBArCT,kCAwCE,WACE1M,OAAOyM,eAAiB,SAACzQ,GACvB,IAAMqI,EAAU,+CAOhB,OANArI,EAAIA,GAAKgE,OAAO2M,SAGd3Q,EAAE4Q,YAAcvI,GAGXA,KAjDb,uBAqDE,cArDF,iCAyDE,SAAoBwI,MAzDtB,oBA4DE,WAAU,IAAD,OACP,OACE,cAAC,GAAD,CAAO3Q,KAAM8B,KAAKJ,MAAM1B,KAAMmG,QAASrE,KAAKJ,MAAMyE,QAASyK,aAAc,kBAAM,EAAKA,gBAAgBC,UAAW,kBAAM,EAAKA,mBA9DhI,GAA+BlO,IAAMC,WA+E/BkO,GAA0B,CAC9B3K,QAAS,GACTnG,KAAM,IAGK+Q,GAAb,kDAIE,WAAYpQ,GAA0B,IAAD,8BACnC,cAAMA,IAJR2E,YAGqC,IAFrCoB,YAEqC,EAEnC,EAAKhF,MAAQoP,GACb,EAAKxL,OAAS,IAAI2I,GAAOtN,EAAMkP,YAC/B,EAAKnJ,OAAS,IAAIgB,GAAO,EAAKpC,QAAQ,SAACE,GAAD,OAAS,EAAKsK,oBAAoBtK,MAJrC,EAJvC,qDAWE,WAAqB,IAAD,OAClB1D,KAAKU,SAAS,CACZxC,KAAM8B,KAAKnB,MAAMqQ,gBAGnBlN,OAAOkM,SAAW,kBAAM,EAAKtJ,OAAOe,cAEpC3F,KAAK4E,OAAOuK,KAAKnP,KAAKnB,MAAMqQ,eAAe,SAACE,GAC1C,OAAQA,EAAI9M,MACV,KAAKc,EAAkBsC,UACrB,EAAK2J,qBAAqB,+BAC1B,MACF,KAAKjM,EAAkB4C,aACrB,EAAKqJ,qBAAqB,gBAC1B,MACF,KAAKjM,EAAkB4B,cACrB,EAAKtE,SAAS,CAAE2D,QAAS+K,EAAInK,aA3BvC,kCAkCE,WACEjF,KAAK0O,iBAnCT,kCAsCE,SAAqBU,GACnBpP,KAAKnB,MAAMyQ,gBAAgBF,GAC3BpP,KAAKnB,MAAM0Q,iBAAiB,MAxChC,iCA2CE,SAAoBV,GACC,qBAAfA,EAAMvM,MACRtC,KAAKqP,qBAAqB,qBA7ChC,iCAiDE,WACErP,KAAK0O,eACL1O,KAAK4E,OAAOe,aACZ3F,KAAKnB,MAAM0Q,iBAAiB,MApDhC,0BAuDE,WACEvN,OAAOqM,QAAQC,UAAU,GAAI,aAAc,KAC3CC,SAASC,MAAQ,eAzDrB,oBA4DE,WAAU,IAAD,OACP,OACE,cAAC,GAAD,CAAOtQ,KAAM8B,KAAKJ,MAAM1B,KAAMmG,QAASrE,KAAKJ,MAAMyE,QAASmL,UAAW,kBAAM,EAAKC,6BA9DvF,GAAiC5O,IAAMC,WA2EjC4O,G,kDAGJ,WAAY7Q,GAAoB,IAAD,8BAC7B,cAAMA,IAHR8Q,eAE+B,IAW/BC,sBAAwB,SAACzN,GACvBH,OAAOqM,QAAQC,UAAU,GAAzB,WAAiCnM,EAAjC,2BAAsDA,IACtDoM,SAASC,MAAT,WAAqBrM,EAArB,iBAb6B,EAgB/B0N,oBAAsB,WACpB,EAAKF,UAAUG,QAASC,SACxBxB,SAASyB,YAAY,SAhBrB,EAAKL,UAAY9O,IAAMoP,YAFM,E,sDAK/B,SAAmBC,GACblQ,KAAKnB,MAAMX,OAASgS,EAAUhS,MAChC8B,KAAK4P,sBAAsB5P,KAAKnB,MAAMX,Q,oBAc1C,WAAU,IAAD,OACP,OACE,cAACgP,GAAD,UACE,eAACC,GAAD,WACE,cAAC,EAAD,IACCnN,KAAKnB,MAAMX,KAER,mCACE,eAACoP,GAAD,0BACc,cAACC,GAAD,CAAe4C,IAAKnQ,KAAK2P,UAAWrN,KAAK,OAAOM,MAAO5C,KAAKnB,MAAMX,KAAMkS,UAAU,EAAMpN,QAAShD,KAAK6P,sBACjH7P,KAAKnB,MAAMiQ,aAEV,cAACtB,GAAD,CAAUxK,QAAS,kBAAM,EAAKnE,MAAMiQ,cAAgB,EAAKjQ,MAAMiQ,gBAA/D,2BAIE,KAEH9O,KAAKnB,MAAM2Q,UAER,cAAChC,GAAD,CAAUxK,QAAS,kBAAM,EAAKnE,MAAM2Q,WAAa,EAAK3Q,MAAM2Q,aAA5D,wBAIA,UAMN,8EAKN,cAACpC,GAAD,UACC,YAAIiD,MAAM,IAAI9E,KAAI,SAACtK,EAAE6B,GAAH,OACjB,cAACuK,GAAD,UACG,EAAKxO,MAAMwF,QAAQvB,GAEhB,mCACI,EAAKjE,MAAMwF,QAAQvB,GAAG6B,UAEpB,mCAAG,EAAK9F,MAAMwF,QAAQvB,GAAGlB,OADzB,cAAC8L,GAAD,UAA4B,EAAK7O,MAAMwF,QAAQvB,GAAGlB,SAKvD,+DAVckB,QAgBtB9C,KAAKnB,MAAMwF,QAAQ9C,OAAS,EACzB,2EACA,KAEHvB,KAAKnB,MAAMkQ,UAER,cAACtB,GAAD,CAAsBvK,SAAUlD,KAAKnB,MAAMwF,QAAQ9C,OAAS,EAAGyB,QAAS,kBAAM,EAAKnE,MAAMkQ,WAAa,EAAKlQ,MAAMkQ,aAAjH,wBAEA,c,GArFMlO,IAAMC,WChQpBwP,GAAW7R,IAAOC,IAAV,+CAkCC6R,GA9BH,WAAO,IAAD,EAE4B9O,oBAAS,GAFrC,mBAET+O,EAFS,KAEOpC,EAFP,OAGoB3M,mBAAS,IAH7B,mBAGTsM,EAHS,KAGG0C,EAHH,OAI0BhP,mBAAS,IAJnC,mBAITyN,EAJS,KAIMK,EAJN,OAKwB9N,mBAAS,IALjC,mBAKTY,EALS,KAKKiN,EALL,KAkBhB,OACE,cAAC,EAAD,UACE,eAACgB,GAAD,WACGE,EAAiB,cAAC,GAAD,CAAWzC,WAAYA,EAAYK,kBAAmBA,EAAmBkB,gBAAiBA,IAAsB,KACjIJ,EAAgB,cAAC,GAAD,CAAanB,WAAYA,EAAYmB,cAAeA,EAAeI,gBAAiBA,EAAiBC,iBAAkBA,IAAuB,KAC7JiB,GAAmBtB,EAAqG,KAArF,cAAC1N,EAAD,CAAQyB,UAfjC,SAAC8K,GACjBK,GAAkB,GAClBqC,EAAc1C,IAayD5K,UAVvD,SAACjF,EAAc6P,GAC/BwB,EAAiBrR,GACjBuS,EAAc1C,IAQ+E1L,aAAcA,UCnBhGqO,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEF9C,SAAS+C,eAAe,SAM1BZ,O","file":"static/js/main.5d0e9198.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 37;","import styled from 'styled-components';\nimport React, { useEffect, useState } from 'react';\nimport FastAverageColor from 'fast-average-color';\n\n\nconst SplashScreenStyle = styled.div`\n  width: 100%;\n  background: #999;\n  text-align: center;\n  height: 100%;\n`\n\ninterface SplashScreenProps {\n  imageSrc: string;\n  bgColor?: string;\n}\n\nexport const SplashBackgroundStyle = styled.div.attrs((props: SplashScreenProps) => ({\n  imageSrc: props.imageSrc,\n  bgColor: props.bgColor || '#555555'\n}))`\n  background-image: url(${props => props.imageSrc});\n  background-color: ${props => props.bgColor};\n  background-size: contain;\n  background-position: center center;\n  background-repeat: no-repeat;\n  height: 100%;\n`\n\nconst SplashTitle = styled.h1`\n  font-size: 70px;\n  color: #FFDC73;\n  -webkit-text-stroke: 1px #BF9B30;\n  margin: 0;\n  padding: 20px 0 50px 0;\n`\n\nconst GameTitleStyle = styled.h2`\n  font-size: 36px;\n  color: #FFDC73;\n  -webkit-text-stroke: 0.5px #BF9B30;\n  text-shadow: 1px 1px 1px #000;\n  margin: 0;\n  text-align: center;\n`\n\nexport const GameTitle = () => (\n  <GameTitleStyle>Schmeckles</GameTitleStyle>\n)\n\nconst HostButton = styled.button`\n  border-radius: 0;\n  font-size: 28px;\n  padding: 10px;\n  background: #91a4e6;\n  border: 2px solid #3451b3;\n  width: 400px;\n`\n\nconst JoinGameArea = styled.div`\n  display: flex;\n  margin: 20px auto;\n  width: 400px;\n`\n\nconst JoinGameInput = styled.input`\n  font-size: 28px;\n  padding: 10px;\n  border: 2px solid #ccc;\n  text-align: center;\n  text-transform: uppercase;\n  width: 150px;\n`\n\nconst JoinGameButton = styled.button`\n  border-radius: 0;\n  font-size: 28px;\n  padding: 10px;\n  border: 2px solid #2f8a33;\n  background: #5ee465;\n  margin-left: 20px;\n  width: 230px;\n`\ninterface SplashBackgroundProps {\n  children: React.ReactNode,\n  src?: string\n}\ninterface SplashBackgroundState {\n  background: {\n    src: string;\n    color: string;\n  }\n}\n\nexport class SplashBackground extends React.Component<SplashBackgroundProps, SplashBackgroundState> {\n  state: SplashBackgroundState;\n\n  constructor(props: SplashBackgroundProps) {\n    super(props);\n\n    this.state = {\n      background: {\n        src: props.src || '',\n        color: ''\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.loadBackground();\n  }\n\n  async loadBackground() {\n    const src = this.props.src || `${process.env.PUBLIC_URL}/splash/splash${Math.floor(Math.random() * 16)+1}.jpg`;\n    const fac = new FastAverageColor();\n\n    const color = await fac.getColorAsync(src);\n\n    this.setState({ background: { src: src, color: color.hex } });\n  }\n\n  render() {\n    return (\n      <SplashBackgroundStyle imageSrc={this.state.background.src} bgColor={this.state.background.color}>\n        {this.props.children}\n      </SplashBackgroundStyle>\n    );\n  }\n}\n\nconst ChangeNameLink = styled.a`\n  color: #00d9ff;\n  text-decoration: underline;\n  cursor: pointer;\n`\n\nconst WelcomeStyle = styled.p`\n  color: #fff;\n  font-size: 24px;\n  text-shadow: 1px 1px 1px #000;\n  font-weight: bold;\n  user-select: none;\n`\n\nconst ChosenNameStyle = styled.a`\n  border-bottom: 1px dashed #fff;\n  cursor: pointer;\n`\n\nconst ChangeNameInput = styled.input`\n  padding: 2px;\n  font-size: 20px;\n  text-align: center;\n  margin-left: 10px;\n  width: 140px;\n`\n\nconst ErrorMessage = styled.div`\n  font-size: 20px;\n  color: #fff;\n  display: inline-block;\n  padding: 8px;\n  border-radius: 8px;\n  background: rgba(255, 0, 0, 0.5);\n`\n\nconst names = ['Helgi','Finnbogi','Abu','Jean','Samo','Giovanni','Luís','Jeanne','Gregorio','Domini','Andres','Guglielmo','Hugo','Muhammad', 'Eldad', 'Wulfstan', 'Joseph', 'Aldo', 'Alessio', 'Cosimo', 'Fabritio', 'Francesca', 'Galileo', 'Isabetta', 'Lavinia', 'Madalena', 'Minerva', 'Nencia', 'Vinci'];\n\nconst randomName = names[Math.floor(Math.random()*names.length)];\n\ninterface SplashProps {\n  hostLobby: (playerName: string) => void;\n  joinLobby: (code: string, playerName: string) => void;\n  errorMessage: string;\n}\n\nexport default function Splash(props: SplashProps) {\n  const [isChangingName, setIsChangingName] = useState(false);\n\n  const [name, setName] = useState(randomName);\n\n  const [code, setCode] = useState('');\n\n  const handleEnter = (i: any) => { \n    if (i.which === 13) {\n      setIsChangingName(false);\n    }\n  }\n\n  useEffect(() => {\n    if (window.location.pathname.length > 1) {\n      const c = window.location.pathname.replace('/','');\n\n      if (c.length === 4) {\n        setCode(c)\n      }\n    }\n  }, [])\n  \n  return (\n    <SplashScreenStyle>\n      <SplashBackground src={`${process.env.PUBLIC_URL}/splash/splash17.jpg`}>\n        <SplashTitle>Schmeckles</SplashTitle>\n        { props.errorMessage ? <ErrorMessage>{props.errorMessage}</ErrorMessage> : null}\n        <WelcomeStyle>\n          Welcome, \n          {isChangingName \n            ? (\n              <ChangeNameInput type=\"text\" placeholder={name} autoFocus={true} onChange={v => setName(v.target.value)} onKeyPress={handleEnter} />\n            )\n            : (\n              <>\n                &nbsp;\n                <ChosenNameStyle onClick={() => setIsChangingName(true)}>{name}</ChosenNameStyle>! \n                &nbsp;\n                <ChangeNameLink onClick={() => setIsChangingName(true)}>Change Name</ChangeNameLink>\n              </>\n            )\n            }\n        </WelcomeStyle>\n        <HostButton onClick={() => props.hostLobby(name)}>\n          Host a game\n        </HostButton>\n        <JoinGameArea>\n          <JoinGameInput type=\"text\" placeholder=\"Code\" value={code} onChange={(e) => setCode(e.target.value)} />\n          <JoinGameButton disabled={code.length !== 4} onClick={() => props.joinLobby(code, name)}>Join Game</JoinGameButton>\n        </JoinGameArea>\n      </SplashBackground>\n    </SplashScreenStyle>\n  )\n}","import Peer from 'peerjs';\nimport { Player } from './Game';\n\nexport enum HostBroadcastType {\n  DISBANDED = 'DISBANDED',\n  DISCONNECTED = 'DISCONNECTED',\n  LOBBY_PLAYERS = 'LOBBY_PLAYERS'\n}\n\ninterface HostNetworkMessage {\n  type: HostBroadcastType,\n  meta?: any;\n}\n\nenum ClientMessageType {\n  DISCONNECTING = 'DISCONNECTING'\n}\n\ninterface ClientNetworkMessage {\n  type: ClientMessageType\n  meta?: any\n}\n\nexport abstract class Network {\n  onError = (err: any) =>  {};\n  player: Player;\n  connectionId: string;\n  peer: Peer;\n  debugLevel: number;\n\n  constructor(player: Player, onError: (err: any) => void) {\n    this.player = player;\n    this.debugLevel = 3;\n    this.connectionId = this.createConnectionId();\n    this.peer = new Peer(this.fullyQualifiedId(this.connectionId), { debug: this.debugLevel });\n\n    this.peer.on('error', onError);\n  }\n\n  fullyQualifiedId(code: string) {\n    return  `schmeckles_${code}`;\n  }\n\n  abstract createConnectionId(): string;\n}\n\nexport class Host extends Network {\n  clients: Peer.DataConnection[] = [];\n  players: Player[] = [];\n\n  createConnectionId() {\n    return Math.random().toString(20).substr(2, 4).toUpperCase();\n  }\n\n  host(onConnect: (code: string) => void, onPlayerUpdate: (p: Player[]) => void) {\n    this.player.connected = true;\n    this.players = [this.player];\n\n    this.peer.on('open', (id) => {\n      onConnect(this.connectionId);\n\n      this.peer.on('connection', (client) => {\n  \n        const player = client.metadata;\n        if (this.players.length < 4 && player.name.length > 0) {\n          this.players.push(player);\n          this.clients.push(client);\n\n          onPlayerUpdate(this.players);\n          this.broadcast({ type: HostBroadcastType.LOBBY_PLAYERS, meta: this.players });\n        }\n\n        client.on('open', () => {\n          client.metadata.connected = true;\n          // Send players when the connection is ready\n          this.broadcast({ type: HostBroadcastType.LOBBY_PLAYERS, meta: this.players });\n          onPlayerUpdate(this.players);\n        });\n\n        client.on('close', () => {\n          console.log('closed connection with ' + client.metadata.name);\n          this.players.splice(this.players.findIndex(p => p.connectionId === client.peer), 1)\n          this.broadcast({ type: HostBroadcastType.LOBBY_PLAYERS, meta: this.players });\n          onPlayerUpdate(this.players);\n        })\n    \n        // Receive data from clients:\n        client.on('data', function(data) {\n          console.log('Received', data);\n        });\n      })\n    });\n  }\n\n  broadcast(m: HostNetworkMessage) {\n    console.log('Broadcasting: ', m);\n\n    this.clients.forEach(c => {\n      c.send(m);\n    })\n  }\n\n  disconnect() {\n    this.broadcast({ type: HostBroadcastType.DISBANDED });\n    this.peer.disconnect();\n  }\n}\n\nexport class Client extends Network {\n  code: string = ''\n\n  createConnectionId() {\n    return Math.random().toString(20).substr(2, 10);\n  }\n\n  join(code: string, onHostBroadcast: (message: HostNetworkMessage) => void) {\n    this.peer.on('open', (id:string) => {\n      this.player.connectionId = this.fullyQualifiedId(this.connectionId);\n\n      const conn = this.peer.connect(this.fullyQualifiedId(code), { metadata: this.player });\n      this.code = code;\n\n      conn.on('open', () => {\n        // Receive data from host\n        conn.on('data', (data) => {\n          console.log('Received broadcast: ', data);\n          onHostBroadcast(data);\n        })\n\n        conn.on('close', () => {\n          onHostBroadcast({ type: HostBroadcastType.DISCONNECTED });\n        })\n      })\n    })\n  }\n\n  disconnect() {\n    this.peer.connections[this.fullyQualifiedId(this.code)][0].close();\n  }\n}\n","import { GameState, Player, GemStash, Gem, Card, Tier, CardPile, emptyGemStash } from './Game';\nimport { Rule, isPlayersTurn, Result, gameIsNotFull, canAffordCard, bankHasEnoughGems, isTakingTwoOrThreeGems, canTakeThreeGems, gemsAreOfSameType, canTakeTwoGems, canReserveCard, gameHasEnoughPlayers, gameHasNotStarted, gameHasStarted, isValidGems } from './Rules';\n\nexport enum Action {\n  JoinGame = 'JoinGame',\n  StartGame = 'StartGame',\n  TakeGems = 'TakeGems',\n  ReserveCard = 'ReserveCard',\n  PurchaseCard = 'PurchaseCard',\n}\n\nexport interface IAction {\n  type?: Action\n  player: Player\n  rules: Rule[]\n  failedRules: Result[]\n  checkRules: (gameState: Readonly<GameState>) => boolean\n  act(gameState: GameState): void;\n}\n\nexport abstract class BaseAction implements IAction {\n  type?: Action\n  player: Player\n  rules: Rule[]\n  failedRules: Result[]\n\n  constructor(p: Player) {\n    this.player = p;\n    this.rules = [];\n    this.failedRules = [];\n  }\n\n  static create(p: Player, t: Action, meta: any) {\n    const actionFactoryMap = {\n      [Action.JoinGame]: JoinGame,\n      [Action.StartGame]: StartGame,\n      [Action.TakeGems]: TakeGems,\n      [Action.PurchaseCard]: PurchaseCard,\n      [Action.ReserveCard]: ReserveCard\n    }\n\n    const ActionToBePerformed = actionFactoryMap[t];\n\n    return new ActionToBePerformed(p, {...meta})\n  }\n\n  checkRules(gameState: Readonly<GameState>): boolean {\n    this.rules.forEach(r => {\n      const result = r(gameState);\n\n      if (!result.passed) {\n        this.failedRules.push(result);\n      }\n    });\n\n    if (this.failedRules.length > 0) {\n      return false;\n    }\n    return true;\n  }\n\n  nextTurn(gameState: GameState) {\n    let turn = gameState.turn + 1;\n\n    if (turn > gameState.players.length) {\n      turn = 1;\n    }\n\n    gameState.turn = turn;\n  }\n\n  abstract act(gameState: GameState): void;\n}\n\nconst moveGems = (from: GemStash, to: GemStash, amount: GemStash) => {\n  Object.keys(from).forEach(gemType => {\n    from[gemType as Gem] -= amount[gemType as Gem];\n    to[gemType as Gem] += amount[gemType as Gem];\n  })\n}\n\nexport class StartGame extends BaseAction {\n  constructor(p: Player, meta: {}) {\n    super(p);\n    this.type = Action.StartGame;\n\n    this.rules = [\n      (g: Readonly<GameState>) => gameHasEnoughPlayers(g.players),\n      (g: Readonly<GameState>) => gameHasNotStarted(g.started)\n    ]\n  }\n\n\n  act(gameState: GameState) {\n    gameState.started = true;\n    gameState.turn = 1;\n  }\n}\n\nexport class JoinGame extends BaseAction {\n  isContextPlayer: boolean;\n  constructor(p: Player, meta: { isContextPlayer: boolean }) {\n    super(p)\n    this.type = Action.JoinGame;\n    this.isContextPlayer = meta.isContextPlayer;\n    this.rules = [\n      (g: Readonly<GameState>) => gameIsNotFull(g.players),\n      (g: Readonly<GameState>) => gameHasNotStarted(g.started)\n    ]\n  }\n\n  act(gameState: GameState) {\n    gameState.players.push(this.player);\n\n    if (this.isContextPlayer) {\n      gameState.contextPlayer = this.player;\n    }\n  }\n}\n\nexport class TakeGems extends BaseAction {\n  gems: GemStash;\n\n  constructor(p: Player, meta: { gems: GemStash }) {\n    super(p);\n\n    this.type = Action.TakeGems;\n    this.gems = meta.gems;\n    this.rules = [\n      (g: Readonly<GameState>) => gameHasStarted(g.started),\n      (g: Readonly<GameState>) => gameHasEnoughPlayers(g.players),\n      (g: Readonly<GameState>) => isPlayersTurn(this.player, g.players, g.turn),\n      (g: Readonly<GameState>) => bankHasEnoughGems(this.gems, g.gems),\n      (g: Readonly<GameState>) => isValidGems(this.gems),\n      (g: Readonly<GameState>) => {\n        const totalGems = Object.values(this.gems).reduce((a,b) => a+b);\n\n        if (totalGems === 2) {\n          const result1 = gemsAreOfSameType(this.gems);\n\n          if (!result1.passed) {\n            return result1;\n          }\n\n          const gem = Object.keys(this.gems).filter(g => this.gems[g as Gem] == 2)[0]\n\n          return canTakeTwoGems(gem as Gem, g.gems);\n        }\n        if (totalGems === 3) {\n          return canTakeThreeGems(this.gems);\n        }\n\n        return isTakingTwoOrThreeGems(totalGems);\n      }\n    ];\n  }\n\n  act(gameState: GameState) {\n    moveGems(gameState.gems, this.player.gems, this.gems);\n    this.nextTurn(gameState);\n  }\n}\n\nexport class PurchaseCard extends BaseAction {\n  cards: Card[];\n  index: number;\n\n  constructor(p: Player, meta: { cards: Card[], index: number }) {\n    super(p);\n\n    this.type = Action.PurchaseCard;\n    this.index = meta.index;\n    this.cards = meta.cards;\n\n    this.rules = [\n      (g: Readonly<GameState>) => gameHasStarted(g.started),\n      (g: Readonly<GameState>) => gameHasEnoughPlayers(g.players),\n      (g: Readonly<GameState>) => isPlayersTurn(this.player, g.players, g.turn),\n      (g: Readonly<GameState>) => { \n        const card = this.cards[this.index];\n\n        return canAffordCard(card, this.player);\n      }\n    ]\n  }\n\n  act(gameState: GameState) {\n    const card = this.cards.splice(this.index,1)[0];\n\n    moveGems(this.player.gems, gameState.gems, card.costs);\n\n    if (card.reserved) {\n      card.reserved = false;\n    }\n\n    this.player.cards.cards.push(card);\n    this.nextTurn(gameState);\n  }\n}\n\nexport class ReserveCard extends BaseAction {\n  cards: Card[];\n  index: number;\n\n  constructor(p: Player, meta: { cards: Card[], index: number }) {\n    super(p);\n\n    this.type = Action.ReserveCard;\n    this.cards = meta.cards;\n    this.index = meta.index;\n\n    this.rules = [\n      (g: Readonly<GameState>) => gameHasStarted(g.started),\n      (g: Readonly<GameState>) => gameHasEnoughPlayers(g.players),\n      (g: Readonly<GameState>) => isPlayersTurn(this.player, g.players, g.turn),\n      (g: Readonly<GameState>) => canReserveCard(this.player)\n    ];\n  }\n\n  act(gameState: GameState) {\n    const card = this.cards.splice(this.index,1)[0];\n\n    const gems = emptyGemStash();\n    gems.star = 1;\n\n    moveGems(gameState.gems, this.player.gems, gems);\n\n    card.reserved = true;\n\n    this.player.reservedCards.push(card);\n    this.nextTurn(gameState);\n  }\n}","import { GameState, Player, PlayerTurn, GemStash, Gem, Card } from './Game';\n\nexport interface Result {\n  passed: boolean;\n  message: string;\n}\n\nexport type Rule = (gameState: Readonly<GameState>) => Result\n\nexport const playerHasJoinedGame = (player: Player, players: Player[]): Result => {\n  return {\n    passed: players.filter(p => p.id === player.id).length > 0,\n    message: 'Player has not joined game'\n  }\n}\n\nexport const gameHasEnoughPlayers = (players: Player[]): Result => {\n  return {\n    passed: players.length > 1,\n    message: 'There must be at least two players to start'\n  }\n}\n\nexport const gameHasNotStarted = (started: boolean): Result => {\n  return {\n    passed: !started,\n    message: 'Game has already started.'\n  }\n}\n\nexport const gameHasStarted = (started: boolean): Result => {\n  return {\n    passed: started,\n    message: 'Game must be started first.'\n  }\n}\n\nexport const isPlayersTurn = (player: Player, players: Player[], turn: PlayerTurn): Result => {\n  return {\n    passed: (players.indexOf(player)+1) === turn,\n    message: 'Players can only act when it is their turn.'\n  }\n}\n\nexport const gameIsNotFull = (players: Player[]): Result => {\n  const PLAYER_LIMIT = 4;\n\n  return {\n    passed: players.length < PLAYER_LIMIT,\n    message: 'This game is full.'\n  }\n}\n\nexport const canAffordCard = (card: Card, player: Player): Result => {\n  const overdrawn = Object.keys(card.costs).filter(gemType => card.costs[gemType as Gem] > player.gems[gemType as Gem]+player.cards.cards.filter(c => c.gem === Gem[gemType as keyof typeof Gem]).length).length;\n\n  return {\n    passed: overdrawn === 0,\n    message: 'Not enough gems to purchase this card.'\n  }\n}\n\n\nexport const gemsAreOfSameType = (desired: GemStash): Result => {\n  return {\n    passed: Object.values(desired).filter(v => v > 0).length === 1,\n    message: 'Gems must be of the same type when taking two gems.'\n  }\n}\n\nexport const canTakeTwoGems = (gem: Gem, bank: GemStash): Result => {\n  return {\n    passed: bank[gem] >= 4,\n    message: 'There must be at least four gems of the desired type in the bank to take two gems.'\n  }\n}\n\nexport const canTakeThreeGems = (desired: GemStash): Result => {\n  return {\n    passed: Object.keys(desired).filter(g => desired[g as Gem] > 1).length === 0,\n    message: 'Gems must be of different types to take three gems.'\n  }\n}\n\nexport const isValidGems = (desired: GemStash): Result => {\n  return {\n    passed: desired.star === 0,\n    message: 'Only valid gems can be selected.'\n  }\n}\n\nexport const canReserveCard = (player: Player): Result => {\n  return {\n    passed: player.reservedCards.length < 3,\n    message: 'A maximum of three cards may be reserved.'\n  }\n}\n\nexport const isTakingTwoOrThreeGems = (totalGems:number): Result => {\n  return {\n    passed: totalGems >= 2 && totalGems <= 3,\n    message: 'Only two or three gems can be taken per turn.'\n  }\n}\n\nexport const bankHasEnoughGems = (desired: GemStash, from: GemStash): Result => {\n  const overdrawn = Object.keys(desired).filter(gemType => desired[gemType as Gem] > from[gemType as Gem]).length;\n\n  return {\n    passed: overdrawn === 0,\n    message: 'Not enough gems in the bank to complete this action.'\n  }\n}\n","import cardsJson from './cards.json';\nimport noblesJson from './nobles.json';\nimport { BaseAction, IAction, Action } from './Actions';\n\ninterface NobleJsonValues {\n  points: number;\n  diamond: number | null;\n  sapphire: number | null;\n  emerald: number | null;\n  ruby: number | null;\n  onyx: number | null;\n}\n\ninterface CardJsonValues {\n  gem: string;\n  tier: number;\n  points: number | null;\n  diamond: number | null;\n  sapphire: number | null;\n  emerald: number | null;\n  ruby: number | null;\n  onyx: number | null;\n}\n\nexport enum Gem {\n  Ruby = 'ruby', \n  Sapphire = 'sapphire', \n  Onyx = 'onyx', \n  Emerald = 'emerald', \n  Diamond = 'diamond',\n  Star = 'star'\n}\n\nexport enum Tier {\n  I = 1, \n  II = 2, \n  III = 3\n}\nexport interface Noble {\n  points: number;\n  costs: GemStash;\n}\n\nexport interface GemStash {\n  [Gem.Ruby]: number;\n  [Gem.Sapphire]: number;\n  [Gem.Diamond]: number;\n  [Gem.Onyx]: number;\n  [Gem.Emerald]: number;\n  [Gem.Star]: number;\n}\n\nexport const emptyGemStash = () => {\n  return {\n    [Gem.Ruby]: 0,\n    [Gem.Sapphire]: 0,\n    [Gem.Diamond]: 0,\n    [Gem.Onyx]: 0,\n    [Gem.Emerald]: 0,\n    [Gem.Star]: 0\n  }\n}\n\nconst mapNobleValuesJsonToNobleType = (noblesValues: NobleJsonValues[]) => noblesValues.map(\n  n => {\n    return {\n      points: n.points,\n      costs: {\n        [Gem.Ruby]: n.ruby || 0,\n        [Gem.Sapphire]: n.sapphire || 0,\n        [Gem.Diamond]: n.diamond || 0,\n        [Gem.Onyx]: n.onyx || 0,\n        [Gem.Emerald]: n.emerald || 0\n      }\n    }\n  }\n);\n\nconst mapCardValuesJsonToCardType = (cardValues: CardJsonValues[]) => cardValues.map(\n  c => new Card(\n    c.points || 0,\n    c.gem as Gem,\n    c.tier as Tier,\n    {\n      [Gem.Ruby]: c.ruby || 0,\n      [Gem.Sapphire]: c.sapphire || 0,\n      [Gem.Diamond]: c.diamond || 0,\n      [Gem.Onyx]: c.onyx || 0,\n      [Gem.Emerald]: c.emerald || 0,\n      [Gem.Star]: 0\n    }\n  )\n)\n\nconst shuffle = (arr:Array<any>) => \n  [...arr].reduceRight((res,_,__,s) => \n    (res.push(s.splice(0|Math.random()*s.length,1)[0]), res), []);\n\nexport class Card {\n  points: number;\n  gem: Gem;\n  tier: Tier;\n  costs: GemStash;\n  reserved?: boolean\n\n  constructor(points: number, gem: Gem, tier: Tier, costs: GemStash) {\n    this.points = points;\n    this.gem = gem;\n    this.tier = tier;\n    this.costs = costs;\n  }\n}\n\nexport class CardPile {\n  cards: Card[];\n  tier?: Tier;\n  \n  constructor(tier?: Tier, cards?: Card[]) {\n    if (tier) this.tier = tier;\n\n    if (cards) {\n      this.cards = shuffle(cards);\n    } else {\n      this.cards = [];\n    }\n  }\n\n  draw(n: number, destination: CardPile) {\n    this.cards.splice(0, n).forEach(c => destination.cards.push(c));\n  }\n}\n\nexport type PlayerTurn = number;\n\nexport class GameState  {\n  tierICards: CardPile;\n  tierIICards: CardPile;\n  tierIIICards: CardPile;\n  tierIDrawPile: CardPile;\n  tierIIDrawPile: CardPile;\n  tierIIIDrawPile: CardPile;\n  nobles: Noble[];\n  gems: GemStash;\n  players: Player[];\n  started: boolean;\n  contextPlayer: Player | undefined;\n  turn: PlayerTurn;\n\n  constructor() {\n    const cards = mapCardValuesJsonToCardType(cardsJson);\n    const nobles = shuffle(mapNobleValuesJsonToNobleType(noblesJson));\n\n    this.players = [];\n    this.nobles = nobles.splice(0, 3);\n\n    this.tierICards = new CardPile(Tier.I, []);\n    this.tierIICards = new CardPile(Tier.II, []);\n    this.tierIIICards = new CardPile(Tier.III, []);\n\n    this.tierIDrawPile = new CardPile(Tier.I, cards.filter(c => c.tier === Tier.I));\n    this.tierIIDrawPile = new CardPile(Tier.II, cards.filter(c => c.tier === Tier.II));\n    this.tierIIIDrawPile = new CardPile(Tier.III, cards.filter(c => c.tier === Tier.III));\n\n    this.drawVisibleCards();\n    this.turn = 1;\n    this.started = false;\n\n    this.gems = {\n      [Gem.Ruby]: 7,\n      [Gem.Sapphire]: 7,\n      [Gem.Diamond]: 7,\n      [Gem.Onyx]: 7,\n      [Gem.Emerald]: 7,\n      [Gem.Star]: 5\n    }\n  }\n\n  drawVisibleCards() {\n    this.tierIDrawPile.draw(4-this.tierICards.cards.length, this.tierICards);\n    this.tierIIDrawPile.draw(4-this.tierIICards.cards.length, this.tierIICards);\n    this.tierIIIDrawPile.draw(4-this.tierIIICards.cards.length, this.tierIIICards);\n  }\n}\n\nexport class Player {\n  id: string;\n  name: string;\n  gems: GemStash;\n  cards: CardPile;\n  reservedCards: Card[];\n  nobles: Noble[];\n  connected: boolean;\n  connectionId: string;\n\n  constructor(name: string) {    \n    this.id = name;\n    this.name = name;\n    this.gems = emptyGemStash();\n    this.cards = new CardPile();\n    this.reservedCards = [];\n    this.nobles = [];\n    this.connected = false;\n    this.connectionId = '';\n  }\n}\n\n\nexport default class Game {\n  gameState: GameState;\n  private static instance: Game | undefined;\n  private onStateUpdateCallback: ((gameState: GameState) => void) | null;\n\n  private constructor() {\n    this.gameState = new GameState();\n    this.onStateUpdateCallback = null;\n  }\n\n  public static getInstance(): Game {\n    if (!Game.instance) {\n      Game.instance = new Game();\n    }\n\n    return Game.instance;\n  }\n\n  getPlayer(playerId: string) {\n    return this.gameState.players.filter(p => p.id === playerId)[0];\n  }\n\n  onStateUpdate(callback: (gameState: GameState) => void):void {\n    this.onStateUpdateCallback = callback;\n  }\n\n  sendAction(player: Player, actionType: Action, data: any) {\n    const action = BaseAction.create(\n      player,\n      actionType,\n      data\n    );  \n\n    this.receiveAction(action);\n  }\n\n  public static reset(): Game {\n    Game.instance = undefined;\n\n    return this.getInstance();\n  }\n\n  receiveAction(action: IAction) {\n    if (action.checkRules(this.gameState)) {\n      action.act(this.gameState);\n    } else {\n      action.failedRules.map(a => alert(a.message));\n    }\n    if (this.onStateUpdateCallback) {\n      this.onStateUpdateCallback(this.gameState);\n    }\n  }\n}","import React from \"react\"\nimport styled from \"styled-components\"\nimport { GameTitle } from \"./Splash\"\nimport { Network, Host, Client, HostBroadcastType } from '../Network';\nimport { Player } from '../Game';\n\n\nconst LobbyPageStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`\n\nconst ContentColumnStyle = styled.div`\n  flex-direction: column;\n  display: flex;\n  justify-content: center;\n  text-shadow: 1px 1px 1px #000;\n  text-align: center;\n  color: #fff;\n`\n\nconst PlayerBoxes = styled.div`\n  width: 450px;\n  display: flex;\n  flex-wrap: wrap;\n`\n\nconst PlayerBoxStyle = styled.div`\n  width: 200px;\n  border: 2px solid #ccc;\n  height: 200px;\n  margin: 10px;\n  background: rgba(55,55,55,0.5);\n  text-align: center;\n  color: #fff;\n  text-shadow: 1px 1px 1px #000;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\n\nconst LobbyCode = styled.div`\n  font-size: 24px;\n  padding: 20px;\n`\n\nconst CodeUnderline = styled.input`\n  background: rgba(55,55,55,0.6);\n  font-size: 24px;\n  text-align: center;\n  color: #fff;\n  border: 0;\n  display: inline;\n  width: 80px;\n  text-shadow: 1px 1px 1px #000;\n  text-decoration: underline;\n  padding: 4px 8px;\n  border-radius: 4px;\n  cursor: pointer;\n`\n\nconst ExitLink = styled.a`\n  font-size: 14px;\n  cursor: pointer;\n  border: 1px solid #ff0000;\n  border-radius: 3px;\n  color: #eee;\n  background: rgba(214, 38, 15, 0.5);\n  margin-left: 10px;\n  padding: 4px;\n`\n\nconst StartGameButtonStyle = styled.button`\n  border-radius: 0;\n  font-size: 28px;\n  padding: 10px;\n  background: #91a4e6;\n  border: 2px solid #3451b3;\n  margin: 10px;\n  width: auto;\n`\n\nconst PlayerNameConnectingStyle = styled.span`\n  color: #aaa;\n`\n\ninterface LobbyHostProps {\n  playerName: string;\n  setIsHostingLobby: (t: boolean) => void;\n  setErrorMessage: (err: string) => void;\n}\n\ninterface LobbyHostState {\n  players: Player[]\n  code: string\n}\n\nconst defaultLobbyHostState = {\n  players: [],\n  code: ''\n}\n\nexport class LobbyHost extends React.Component<LobbyHostProps, LobbyHostState> {\n  player: Player\n  host: Host\n\n  constructor(props: LobbyHostProps) {\n    super(props);\n    this.player = new Player(props.playerName);\n    this.state = defaultLobbyHostState;\n    this.host = new Host(this.player, (err) => this.networkErrorHandler(err));\n  }\n\n  componentDidMount() {\n    this.setState({\n      players: [this.player]\n    });\n\n    this.setWindowCloseDialog();\n    window.onunload = () => this.host.disconnect();\n\n    this.host.host(c => this.setState({ code: c }), p => this.setState({ players: p }));\n    \n  }\n\n  disbandLobby() {\n    if (window.confirm('Are you sure you want to disband this lobby? Players will not be able to join with this lobby code.') && this.props.setIsHostingLobby) {\n      this.props.setIsHostingLobby(false);\n      window.history.pushState({}, 'Schmeckles', '/');\n      document.title = 'Schmeckles';\n    }\n  }\n\n  cleanupLobby() {\n    window.onbeforeunload = null;\n    this.host.disconnect();\n  }\n\n  componentWillUnmount() {\n    this.cleanupLobby();\n  }\n\n  setWindowCloseDialog() {\n    window.onbeforeunload = (e: any) => {\n      const message = 'Are you sure you want to disband this lobby?';\n      e = e || window.event;\n\n      if (e) {\n        e.returnValue = message;\n      }\n\n      return message;\n    }\n  }\n\n  startGame() {\n\n  }\n\n  networkErrorHandler(error: any) {\n  }\n\n  render() {\n    return (\n      <Lobby code={this.state.code} players={this.state.players} disbandLobby={() => this.disbandLobby()} startGame={() => this.startGame()} />\n    )\n  }\n}\n\ninterface LobbyClientProps {\n  playerName: string;\n  joinLobbyCode: string;\n  setJoinLobbyCode: (c: string) => void;\n  setErrorMessage: (err: string) => void;\n}\n\ninterface LobbyClientState {\n  code: string\n  players: Player[]\n}\n\nconst defaultLobbyClientState = {\n  players: [],\n  code: ''\n}\n\nexport class LobbyClient extends React.Component<LobbyClientProps,LobbyClientState> {\n  player: Player\n  client: Client\n\n  constructor(props: LobbyClientProps) {\n    super(props);\n    this.state = defaultLobbyClientState;\n    this.player = new Player(props.playerName);\n    this.client = new Client(this.player, (err) => this.networkErrorHandler(err));\n  }\n\n  componentDidMount() {\n    this.setState({ \n      code: this.props.joinLobbyCode \n    });\n\n    window.onunload = () => this.client.disconnect();\n\n    this.client.join(this.props.joinLobbyCode, (msg) => {\n      switch (msg.type) {\n        case HostBroadcastType.DISBANDED:\n          this.exitWithErrorMessage('Lobby was disbanded by host');\n          break;\n        case HostBroadcastType.DISCONNECTED:\n          this.exitWithErrorMessage('Disconnected');\n          break;\n        case HostBroadcastType.LOBBY_PLAYERS:\n          this.setState({ players: msg.meta });\n          break;\n\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.cleanupLobby();\n  }\n\n  exitWithErrorMessage(msg: string) {\n    this.props.setErrorMessage(msg);\n    this.props.setJoinLobbyCode('');\n  }\n\n  networkErrorHandler(error: any) {\n    if (error.type === 'peer-unavailable') {\n      this.exitWithErrorMessage('Lobby not found');\n    }\n  }\n\n  cleanupLobbyAndExit() {\n    this.cleanupLobby();\n    this.client.disconnect();\n    this.props.setJoinLobbyCode('');\n  }\n\n  cleanupLobby() {\n    window.history.pushState({}, 'Schmeckles', '/');\n    document.title = 'Schmeckles';\n  }\n\n  render() {\n    return (\n      <Lobby code={this.state.code} players={this.state.players} exitLobby={() => this.cleanupLobbyAndExit()} />\n    )\n  }\n}\n\ninterface LobbyProps {\n  code: string;\n  players: Player[];\n  startGame?: () => void;\n  disbandLobby?: () => void;\n  exitLobby?: () => void;\n}\n\nclass Lobby extends React.Component<LobbyProps> {\n  codeInput: React.RefObject<HTMLInputElement>;\n\n  constructor(props: LobbyProps) {\n    super(props);\n    this.codeInput = React.createRef();\n  }\n\n  componentDidUpdate(prevProps: LobbyProps) {\n    if (this.props.code !== prevProps.code) {\n      this.updateBrowserLocation(this.props.code);\n    }    \n  }\n\n  updateBrowserLocation = (c: string) => {\n    window.history.pushState({}, `[${c}] Schmeckles`, `/${c}`)\n    document.title = `[${c}] Schmeckles`\n  }\n\n  copyCodeToClipboard = () => {\n    this.codeInput.current!.select();\n    document.execCommand(\"copy\");\n  }\n\n  render() {\n    return (\n      <LobbyPageStyle>\n        <ContentColumnStyle>\n          <GameTitle />\n          {this.props.code \n            ? (\n              <>\n                <LobbyCode>\n                  Lobby Code: <CodeUnderline ref={this.codeInput} type=\"text\" value={this.props.code} readOnly={true} onClick={this.copyCodeToClipboard} />\n                  {this.props.disbandLobby\n                    ? (\n                    <ExitLink onClick={() => this.props.disbandLobby && this.props.disbandLobby()}>\n                      Disband Lobby\n                    </ExitLink>\n                    )\n                    : null\n                  }\n                  {this.props.exitLobby\n                    ? (\n                      <ExitLink onClick={() => this.props.exitLobby && this.props.exitLobby()}>\n                        Exit Lobby\n                      </ExitLink>\n                    ) \n                    : null\n                  }\n                </LobbyCode>\n              </>\n            )\n            : (\n                <>\n                  Establishing P2P network connection...\n                </>\n              )\n          }\n          <PlayerBoxes>\n          {[...Array(4)].map((p,i) =>\n            <PlayerBoxStyle key={i}>\n              {this.props.players[i] \n                ? (\n                  <>\n                    {!this.props.players[i].connected \n                      ? <PlayerNameConnectingStyle>{this.props.players[i].name}</PlayerNameConnectingStyle>\n                      : <>{this.props.players[i].name}</>\n                    }\n                  </>\n                )\n                : (<>Waiting for players...</>)\n              }\n              \n            </PlayerBoxStyle>\n          )}\n          </PlayerBoxes>\n          {this.props.players.length < 2\n            ? <p>At least two players needed to start game.</p>\n            : null}\n\n          {this.props.startGame \n            ? (\n              <StartGameButtonStyle disabled={this.props.players.length < 2} onClick={() => this.props.startGame && this.props.startGame()}>Start Game</StartGameButtonStyle>\n            )\n            : null\n          }\n        </ContentColumnStyle>\n      </LobbyPageStyle>\n    )\n  }\n}\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport GameUI from './Ui/Game';\nimport { LobbyClient, LobbyHost } from './Ui/Lobby';\nimport Splash, { SplashBackground } from './Ui/Splash';\n\nconst AppStyle = styled.div`\n  height: 100%;\n`\n\nconst App = () => {\n\n  const [isHostingLobby, setIsHostingLobby] = useState(false);\n  const [playerName, setPlayerName] = useState('');\n  const [joinLobbyCode, setJoinLobbyCode] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  \n\n  const hostLobby = (playerName: string) => {\n    setIsHostingLobby(true);\n    setPlayerName(playerName);\n  }\n\n  const joinLobby = (code: string, playerName:string) => {\n    setJoinLobbyCode(code);\n    setPlayerName(playerName);\n  }\n\n  return (\n    <SplashBackground>\n      <AppStyle>\n        {isHostingLobby ? <LobbyHost playerName={playerName} setIsHostingLobby={setIsHostingLobby} setErrorMessage={setErrorMessage} /> : null}\n        {joinLobbyCode ? <LobbyClient playerName={playerName} joinLobbyCode={joinLobbyCode} setErrorMessage={setErrorMessage} setJoinLobbyCode={setJoinLobbyCode} /> : null}\n        {!isHostingLobby && !joinLobbyCode ? <Splash hostLobby={hostLobby} joinLobby={joinLobby} errorMessage={errorMessage} /> : null}\n      </AppStyle>\n    </SplashBackground>\n  )\n};\n\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}